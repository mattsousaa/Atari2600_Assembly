------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with VCS register memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Declare the variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U008e ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player1 x-position (enemy)
     18 U0083		       00	   BomberYPos byte.b		; player1 y-position (enemy)
     19 U0084		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     20 U0086		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     21 U0088		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     22 U008a		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     23 U008c		       00	   JetAnimOffset byte.b		; player0 frame offset for sprite animation
     24 U008d		       00	   Random     byte.b		; used to generate random bomber x-position
     25 U008e
     26 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     27 U008e							;; Define constants
     28 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29 U008e		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     30 U008e		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     31 U008e
     32 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33 U008e							;; Start our ROM code at memory address $F000
     34 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  10000 ????				       seg	Code
     36  f000					      org	$F000
     37  f000
     38  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     40  f00b
     41  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  f00b							;; Initialize RAM variables and TIA registers
     43  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  f00b		       a9 44		      lda	#68
     45  f00d		       85 80		      sta	JetXPos	; JetXPos = 68
     46  f00f		       a9 0a		      lda	#10
     47  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     48  f013		       a9 3e		      lda	#62
     49  f015		       85 82		      sta	BomberXPos	; BomberXPos = 62
     50  f017		       a9 53		      lda	#83
     51  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     52  f01b		       a9 d4		      lda	#%11010100
     53  f01d		       85 8d		      sta	Random	; Random = $D4
     54  f01f
     55  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  f01f							;; Initialize pointers to the correct lookup table addresses (little endian arquitecture)
     57  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     58  f01f		       a9 bd		      lda	#<JetSprite
     59  f021		       85 84		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     60  f023		       a9 f1		      lda	#>JetSprite
     61  f025		       85 85		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     62  f027
     63  f027		       a9 d8		      lda	#<JetColor
     64  f029		       85 86		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     65  f02b		       a9 f1		      lda	#>JetColor
     66  f02d		       85 87		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     67  f02f
     68  f02f		       a9 cf		      lda	#<BomberSprite
     69  f031		       85 88		      sta	BomberSpritePtr	; lo-byte pointer for enemy sprite lookup table
     70  f033		       a9 f1		      lda	#>BomberSprite
     71  f035		       85 89		      sta	BomberSpritePtr+1	; hi-byte pointer for enemy sprite lookup table
     72  f037
     73  f037		       a9 ea		      lda	#<BomberColor
     74  f039		       85 8a		      sta	BomberColorPtr	; lo-byte pointer for enemy color lookup table
     75  f03b		       a9 f1		      lda	#>BomberColor
     76  f03d		       85 8b		      sta	BomberColorPtr+1	; hi-byte pointer for enemy color lookup table
     77  f03f
     78  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     79  f03f							;; Start the main display loop and frame rendering
     80  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     81  f03f				   StartFrame
     82  f03f
     83  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     84  f03f							;; Calculations and tasks performed in the pre-VBlank
     85  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     86  f03f		       a5 80		      lda	JetXPos
     87  f041		       a0 00		      ldy	#0
     88  f043		       20 8b f1 	      jsr	SetObjectXPos	; set player0 horizontal position <jump subroutine>
     89  f046
     90  f046		       a5 82		      lda	BomberXPos
     91  f048		       a0 01		      ldy	#1
     92  f04a		       20 8b f1 	      jsr	SetObjectXPos	; set player1 horizontal position <jump subroutine>
     93  f04d
     94  f04d		       85 02		      sta	WSYNC
     95  f04f		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
     96  f051
     97  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f051							;; Display VSYNC and VBLANK
     99  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f051		       a9 02		      lda	#2
    101  f053		       85 01		      sta	VBLANK	; turn on VBLANK
    102  f055		       85 00		      sta	VSYNC	; turn on VSYNC
    103  f057					      REPEAT	3
    104  f057		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    103  f057					      REPEND
    104  f059		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    103  f059					      REPEND
    104  f05b		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    105  f05d					      REPEND
    106  f05d		       a9 00		      lda	#0
    107  f05f
    108  f05f		       85 00		      sta	VSYNC	; turn off VSYNC
    109  f061					      REPEAT	37
    110  f061		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f061					      REPEND
    110  f063		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f063					      REPEND
    110  f065		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f065					      REPEND
    110  f067		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f067					      REPEND
    110  f069		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f069					      REPEND
    110  f06b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f06b					      REPEND
    110  f06d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f06d					      REPEND
    110  f06f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f06f					      REPEND
    110  f071		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f071					      REPEND
    110  f073		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f073					      REPEND
    110  f075		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f075					      REPEND
    110  f077		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f077					      REPEND
    110  f079		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f079					      REPEND
    110  f07b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f07b					      REPEND
    110  f07d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f07d					      REPEND
    110  f07f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f07f					      REPEND
    110  f081		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f081					      REPEND
    110  f083		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f083					      REPEND
    110  f085		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f085					      REPEND
    110  f087		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f087					      REPEND
    110  f089		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f089					      REPEND
    110  f08b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f08b					      REPEND
    110  f08d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f08d					      REPEND
    110  f08f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f08f					      REPEND
    110  f091		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f091					      REPEND
    110  f093		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f093					      REPEND
    110  f095		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f095					      REPEND
    110  f097		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f097					      REPEND
    110  f099		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f099					      REPEND
    110  f09b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f09b					      REPEND
    110  f09d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f09d					      REPEND
    110  f09f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f09f					      REPEND
    110  f0a1		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f0a1					      REPEND
    110  f0a3		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f0a3					      REPEND
    110  f0a5		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f0a5					      REPEND
    110  f0a7		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    109  f0a7					      REPEND
    110  f0a9		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    111  f0ab					      REPEND
    112  f0ab		       85 01		      sta	VBLANK	; turn off VBLANK
    113  f0ad
    114  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f0ad							;; Display the 96 visible scanlines of our main game <because 2-line kernel>
    116  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    117  f0ad				   GameVisibleLine
    118  f0ad		       a9 84		      lda	#$84
    119  f0af		       85 09		      sta	COLUBK	; set background/river color to blue
    120  f0b1		       a9 c2		      lda	#$C2
    121  f0b3		       85 08		      sta	COLUPF	; set playfield/grass color to green
    122  f0b5		       a9 01		      lda	#%00000001
    123  f0b7		       85 0a		      sta	CTRLPF	; enable playfield reflection
    124  f0b9		       a9 f0		      lda	#$F0
    125  f0bb		       85 0d		      sta	PF0	; setting PF0 bit pattern
    126  f0bd		       a9 fc		      lda	#$FC
    127  f0bf		       85 0e		      sta	PF1	; setting PF1 bit pattern
    128  f0c1		       a9 00		      lda	#0
    129  f0c3		       85 0f		      sta	PF2	; setting PF2 bit pattern
    130  f0c5
    131  f0c5		       a2 60		      ldx	#96	; X counts the number of remaining scanlines
    132  f0c7				   .GameLineLoop		; inside GameVisibleLine label
    133  f0c7				   .AreWeInsideJetSprite		; check if should render sprite player0
    134  f0c7		       8a		      txa		; transfer X to A
    135  f0c8		       38		      sec		; make sure carry flag is set
    136  f0c9		       e5 81		      sbc	JetYPos	; subtract sprite Y coordinate
    137  f0cb		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height bounds?
    138  f0cd		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call subroutine
    139  f0cf		       a9 00		      lda	#0	; else, set lookup index to 0
    140  f0d1				   .DrawSpriteP0
    141  f0d1		       18		      clc		; clears carry flag before addition
    142  f0d2		       65 8c		      adc	JetAnimOffset	; jumps to correct sprite frame in memory
    143  f0d4		       a8		      tay		; load Y so we can work with pointer
    144  f0d5		       b1 84		      lda	(JetSpritePtr),Y	; load player bitmap slice of data
    145  f0d7		       85 02		      sta	WSYNC	; wait for next scanline
    146  f0d9		       85 1b		      sta	GRP0	; set graphics for player 0
    147  f0db		       b1 86		      lda	(JetColorPtr),Y	; load player color from lookup table
    148  f0dd		       85 06		      sta	COLUP0	; set color for player 0 slice
    149  f0df
    150  f0df				   .AreWeInsideBomberSprite		; check if should render sprite player1
    151  f0df		       8a		      txa		; transfer X to A
    152  f0e0		       38		      sec		; make sure carry flag is set
    153  f0e1		       e5 83		      sbc	BomberYPos	; subtract sprite Y coordinate
    154  f0e3		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height bounds?
    155  f0e5		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call subroutine
    156  f0e7		       a9 00		      lda	#0	; else, set index to 0
    157  f0e9				   .DrawSpriteP1
    158  f0e9		       a8		      tay
    159  f0ea		       a9 05		      lda	#%0000101
    160  f0ec		       85 05		      sta	NUSIZ1	; stretch player1 sprite
    161  f0ee		       b1 88		      lda	(BomberSpritePtr),Y	; load player bitmap slice of data
    162  f0f0		       85 02		      sta	WSYNC	; wait for next scanline
    163  f0f2		       85 1c		      sta	GRP1	; set graphics for player 0
    164  f0f4		       b1 8a		      lda	(BomberColorPtr),Y	; load player color from lookup table
    165  f0f6		       85 07		      sta	COLUP1	; set color for player 0 slice
    166  f0f8
    167  f0f8		       ca		      dex		; X--
    168  f0f9		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    169  f0fb
    170  f0fb		       a9 00		      lda	#0
    171  f0fd		       85 8c		      sta	JetAnimOffset	; reset jet animation frame to zero each frame
    172  f0ff
    173  f0ff		       85 02		      sta	WSYNC	; wait for final scanline
    174  f101
    175  f101							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    176  f101							;; Display Overscan
    177  f101							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    178  f101		       a9 02		      lda	#2
    179  f103		       85 01		      sta	VBLANK	; turn on VBLANK again
    180  f105					      REPEAT	30
    181  f105		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f105					      REPEND
    181  f107		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f107					      REPEND
    181  f109		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f109					      REPEND
    181  f10b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f10b					      REPEND
    181  f10d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f10d					      REPEND
    181  f10f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f10f					      REPEND
    181  f111		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f111					      REPEND
    181  f113		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f113					      REPEND
    181  f115		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f115					      REPEND
    181  f117		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f117					      REPEND
    181  f119		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f119					      REPEND
    181  f11b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f11b					      REPEND
    181  f11d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f11d					      REPEND
    181  f11f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f11f					      REPEND
    181  f121		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f121					      REPEND
    181  f123		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f123					      REPEND
    181  f125		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f125					      REPEND
    181  f127		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f127					      REPEND
    181  f129		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f129					      REPEND
    181  f12b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f12b					      REPEND
    181  f12d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f12d					      REPEND
    181  f12f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f12f					      REPEND
    181  f131		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f131					      REPEND
    181  f133		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f133					      REPEND
    181  f135		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f135					      REPEND
    181  f137		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f137					      REPEND
    181  f139		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f139					      REPEND
    181  f13b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f13b					      REPEND
    181  f13d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    180  f13d					      REPEND
    181  f13f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    182  f141					      REPEND
    183  f141		       a9 00		      lda	#0
    184  f143		       85 01		      sta	VBLANK	; turn off VBLANK
    185  f145
    186  f145							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    187  f145							;; Process joystick input for player0
    188  f145							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    189  f145				   CheckP0Up
    190  f145		       a9 10		      lda	#%00010000	; player0 joystick up
    191  f147		       2c 80 02 	      bit	SWCHA
    192  f14a		       d0 06		      bne	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    193  f14c		       e6 81		      inc	JetYPos
    194  f14e		       a9 00		      lda	#0
    195  f150		       85 8c		      sta	JetAnimOffset	; reset sprite animation to first frame
    196  f152
    197  f152				   CheckP0Down
    198  f152		       a9 20		      lda	#%00100000	; player0 joystick down
    199  f154		       2c 80 02 	      bit	SWCHA
    200  f157		       d0 06		      bne	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    201  f159		       c6 81		      dec	JetYPos
    202  f15b		       a9 00		      lda	#0
    203  f15d		       85 8c		      sta	JetAnimOffset	; reset sprite animation to first frame
    204  f15f
    205  f15f				   CheckP0Left
    206  f15f		       a9 40		      lda	#%01000000	; player0 joystick left
    207  f161		       2c 80 02 	      bit	SWCHA
    208  f164		       d0 06		      bne	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    209  f166		       c6 80		      dec	JetXPos
    210  f168		       a5 09		      lda	JET_HEIGHT	; 9
    211  f16a		       85 8c		      sta	JetAnimOffset	; set animation offset to the second frame
    212  f16c
    213  f16c				   CheckP0Right
    214  f16c		       a9 80		      lda	#%10000000	; player0 joystick right
    215  f16e		       2c 80 02 	      bit	SWCHA
    216  f171		       d0 06		      bne	EndInputCheck	; if bit pattern doesnt match, bypass Right block
    217  f173		       e6 80		      inc	JetXPos
    218  f175		       a5 09		      lda	JET_HEIGHT	; 9
    219  f177		       85 8c		      sta	JetAnimOffset	; set animation offset to the second frame
    220  f179
    221  f179				   EndInputCheck		; fallback when no input was performed
    222  f179
    223  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    224  f179							;; Calculations to update position for next frame
    225  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    226  f179				   UpdateBomberPosition
    227  f179		       a5 83		      lda	BomberYPos
    228  f17b		       18		      clc
    229  f17c		       c9 00		      cmp	#0	; compare bomber y-position with 0
    230  f17e		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    231  f180		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame
    232  f182		       4c 88 f1 	      jmp	EndPositionUpdate
    233  f185				   .ResetBomberPosition
    234  f185		       20 9f f1 	      jsr	GetRandomBomberPos	; call subroutine for random bomber x-position
    235  f188
    236  f188				   EndPositionUpdate		; fallback for the position update code
    237  f188
    238  f188							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    239  f188							;; Loop back to start a brand new frame
    240  f188							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    241  f188		       4c 3f f0 	      jmp	StartFrame	; continue to display the next frame
    242  f18b
    243  f18b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    244  f18b							;; Subroutine to handle object horizontal position with fine offset
    245  f18b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    246  f18b							;; A is the target x-coordinate position in pixels of our object
    247  f18b							;; Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    248  f18b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    249  f18b				   SetObjectXPos subroutine
    250  f18b		       85 02		      sta	WSYNC	; start a fresh new scanline
    251  f18d		       38		      sec		; make sure carry-flag is set before subtraction
    252  f18e				   .Div15Loop
    253  f18e		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    254  f190		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    255  f192		       49 07		      eor	#7	; handle offset range from -8 to 7
    256  f194		       0a		      asl
    257  f195		       0a		      asl
    258  f196		       0a		      asl
    259  f197		       0a		      asl		; four shift lefts to get only the top 4 bits
    260  f198		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    261  f19b		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    262  f19e		       60		      rts		; return to the memory address that called the subroutine
    263  f19f
    264  f19f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    265  f19f							;; Subroutine to generate a Linear-Feedback Shift Register random number
    266  f19f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    267  f19f							;; Generate a LFSR random number for the X-position of the bomber.
    268  f19f							;; Divide the random value by 4 to limit the size of the result to match river.
    269  f19f							;; Add 30 to compensate for the left green playfield
    270  f19f							;; The routine also sets the Y-position of the bomber to the top of the screen.
    271  f19f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    272  f19f				   GetRandomBomberPos subroutine
    273  f19f		       a5 8d		      lda	Random
    274  f1a1		       0a		      asl		; arithmetic shift left
    275  f1a2		       45 8d		      eor	Random	; exclusive OR
    276  f1a4		       0a		      asl
    277  f1a5		       45 8d		      eor	Random
    278  f1a7		       0a		      asl
    279  f1a8		       0a		      asl
    280  f1a9		       45 8d		      eor	Random
    281  f1ab		       0a		      asl
    282  f1ac		       26 8d		      rol	Random	; performs a series of shifts and bit operations
    283  f1ae
    284  f1ae		       4a		      lsr		; logic shift right
    285  f1af		       4a		      lsr		; divide the value by 4 with 2 right shifts
    286  f1b0		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    287  f1b2		       a9 1e		      lda	#30
    288  f1b4		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    289  f1b6		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    290  f1b8
    291  f1b8		       a9 60		      lda	#96
    292  f1ba		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    293  f1bc
    294  f1bc		       60		      rts		; return from subroutine
    295  f1bd
    296  f1bd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    297  f1bd							;; Declare ROM lookup tables
    298  f1bd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    299  f1bd				   JetSprite
    300  f1bd		       00		      .byte.b	#%00000000	;
    301  f1be		       14		      .byte.b	#%00010100	;   # #
    302  f1bf		       7f		      .byte.b	#%01111111	; #######
    303  f1c0		       3e		      .byte.b	#%00111110	;  #####
    304  f1c1		       1c		      .byte.b	#%00011100	;   ###
    305  f1c2		       1c		      .byte.b	#%00011100	;   ###
    306  f1c3		       08		      .byte.b	#%00001000	;    #
    307  f1c4		       08		      .byte.b	#%00001000	;    #
    308  f1c5		       08		      .byte.b	#%00001000	;    #
    309  f1c6
    310  f1c6				   JetSpriteTurn
    311  f1c6		       00		      .byte.b	#%00000000	;
    312  f1c7		       08		      .byte.b	#%00001000	;    #
    313  f1c8		       3e		      .byte.b	#%00111110	;  #####
    314  f1c9		       1c		      .byte.b	#%00011100	;   ###
    315  f1ca		       1c		      .byte.b	#%00011100	;   ###
    316  f1cb		       1c		      .byte.b	#%00011100	;   ###
    317  f1cc		       08		      .byte.b	#%00001000	;    #
    318  f1cd		       08		      .byte.b	#%00001000	;    #
    319  f1ce		       08		      .byte.b	#%00001000	;    #
    320  f1cf
    321  f1cf				   BomberSprite
    322  f1cf		       00		      .byte.b	#%00000000	;
    323  f1d0		       08		      .byte.b	#%00001000	;    #
    324  f1d1		       08		      .byte.b	#%00001000	;    #
    325  f1d2		       2a		      .byte.b	#%00101010	;  # # #
    326  f1d3		       3e		      .byte.b	#%00111110	;  #####
    327  f1d4		       7f		      .byte.b	#%01111111	; #######
    328  f1d5		       2a		      .byte.b	#%00101010	;  # # #
    329  f1d6		       08		      .byte.b	#%00001000	;    #
    330  f1d7		       1c		      .byte.b	#%00011100	;   ###
    331  f1d8
    332  f1d8				   JetColor
    333  f1d8		       00		      .byte.b	#$00
    334  f1d9		       fe		      .byte.b	#$FE
    335  f1da		       0c		      .byte.b	#$0C
    336  f1db		       0e		      .byte.b	#$0E
    337  f1dc		       0e		      .byte.b	#$0E
    338  f1dd		       04		      .byte.b	#$04
    339  f1de		       ba		      .byte.b	#$BA
    340  f1df		       0e		      .byte.b	#$0E
    341  f1e0		       08		      .byte.b	#$08
    342  f1e1
    343  f1e1				   JetColorTurn
    344  f1e1		       00		      .byte.b	#$00
    345  f1e2		       fe		      .byte.b	#$FE
    346  f1e3		       0c		      .byte.b	#$0C
    347  f1e4		       0e		      .byte.b	#$0E
    348  f1e5		       0e		      .byte.b	#$0E
    349  f1e6		       04		      .byte.b	#$04
    350  f1e7		       0e		      .byte.b	#$0E
    351  f1e8		       0e		      .byte.b	#$0E
    352  f1e9		       08		      .byte.b	#$08
    353  f1ea
    354  f1ea				   BomberColor
    355  f1ea		       00		      .byte.b	#$00
    356  f1eb		       32		      .byte.b	#$32
    357  f1ec		       32		      .byte.b	#$32
    358  f1ed		       0e		      .byte.b	#$0E
    359  f1ee		       40		      .byte.b	#$40
    360  f1ef		       40		      .byte.b	#$40
    361  f1f0		       40		      .byte.b	#$40
    362  f1f1		       40		      .byte.b	#$40
    363  f1f2		       40		      .byte.b	#$40
    364  f1f3
    365  f1f3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    366  f1f3							;; Complete ROM size with exactly 4KB
    367  f1f3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  fffc					      org	$FFFC	; move to position $FFFC
    369  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    370  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
