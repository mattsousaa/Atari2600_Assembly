------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with VCS register memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Declare the variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U009b ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player1 x-position (enemy)
     18 U0083		       00	   BomberYPos byte.b		; player1 y-position (enemy)
     19 U0084		       00	   MissileXPos byte.b		; missile x-position
     20 U0085		       00	   MissileYPos byte.b		; missile y-position
     21 U0086		       00	   Score      byte.b		; 2-digit score stored as BCD
     22 U0087		       00	   Timer      byte.b		; 2-digit timer stored as BCD
     23 U0088		       00	   Temp       byte.b		; auxiliary variable to store temp values
     24 U0089		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score Ones digit
     25 U008b		       00 00	   TensDigitOffset word.w		; lookup table offset for the score Tens digit
     26 U008d		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     27 U008f		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     28 U0091		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     29 U0093		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     30 U0095		       00	   JetAnimOffset byte.b		; player0 frame offset for sprite animation
     31 U0096		       00	   Random     byte.b		; used to generate random bomber x-position
     32 U0097		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     33 U0098		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     34 U0099		       00	   TerrainColor byte.b		; store the color of the terrain playfield
     35 U009a		       00	   RiverColor byte.b		; store the color of the river playfield
     36 U009b
     37 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U009b							;; Define constants
     39 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40 U009b		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     41 U009b		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     42 U009b		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height (#rows in lookup table)
     43 U009b
     44 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45 U009b							;; Start our ROM code at memory address $F000
     46 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     47  10000 ????				       seg	Code
     48  f000					      org	$F000
     49  f000
     50  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     52  f00b
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b							;; Initialize RAM variables and TIA registers
     55  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  f00b		       a9 44		      lda	#68
     57  f00d		       85 80		      sta	JetXPos	; JetXPos = 68
     58  f00f		       a9 0a		      lda	#10
     59  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     60  f013		       a9 3e		      lda	#62
     61  f015		       85 82		      sta	BomberXPos	; BomberXPos = 62
     62  f017		       a9 53		      lda	#83
     63  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     64  f01b		       a9 d4		      lda	#%11010100
     65  f01d		       85 96		      sta	Random	; Random = $D4
     66  f01f		       a9 00		      lda	#0
     67  f021		       85 86		      sta	Score	; Score = 0
     68  f023		       a9 00		      lda	#0
     69  f025		       85 87		      sta	Timer	; Timer = 0
     70  f027
     71  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     72  f027							;; Declare a MACRO to check if we should display the missile 0
     73  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     74  f027					      MAC	draw_missile
     75  f027					      lda	#%00000000
     76  f027					      cpx	MissileYPos	; compare X (current scanline) with missile Y pos
     77  f027					      bne	.SkipMissileDraw	; if (X != missile Y position), then skip draw
     78  f027				   .DrawMissile 		; else:
     79  f027					      lda	#%00000010	;     enable missile 0 display
     80  f027					      inc	MissileYPos	;     MissileYPos++
     81  f027				   .SkipMissileDraw
     82  f027					      sta	ENAM0	; store correct value in the TIA missile register
     83  f027					      ENDM		; stsrts macro
     84  f027
     85  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     86  f027							;; Initialize pointers to the correct lookup table addresses (little endian arquitecture)
     87  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     88  f027		       a9 23		      lda	#<JetSprite
     89  f029		       85 8d		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     90  f02b		       a9 f3		      lda	#>JetSprite
     91  f02d		       85 8e		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     92  f02f
     93  f02f		       a9 3e		      lda	#<JetColor
     94  f031		       85 8f		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     95  f033		       a9 f3		      lda	#>JetColor
     96  f035		       85 90		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     97  f037
     98  f037		       a9 35		      lda	#<BomberSprite
     99  f039		       85 91		      sta	BomberSpritePtr	; lo-byte pointer for enemy sprite lookup table
    100  f03b		       a9 f3		      lda	#>BomberSprite
    101  f03d		       85 92		      sta	BomberSpritePtr+1	; hi-byte pointer for enemy sprite lookup table
    102  f03f
    103  f03f		       a9 50		      lda	#<BomberColor
    104  f041		       85 93		      sta	BomberColorPtr	; lo-byte pointer for enemy color lookup table
    105  f043		       a9 f3		      lda	#>BomberColor
    106  f045		       85 94		      sta	BomberColorPtr+1	; hi-byte pointer for enemy color lookup table
    107  f047
    108  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    109  f047							;; Start the main display loop and frame rendering
    110  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    111  f047				   StartFrame
    112  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    113  f047							;; Display VSYNC and VBLANK
    114  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f047		       a9 02		      lda	#2
    116  f049		       85 01		      sta	VBLANK	; turn on VBLANK
    117  f04b		       85 00		      sta	VSYNC	; turn on VSYNC
    118  f04d					      REPEAT	3
    119  f04d		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    118  f04d					      REPEND
    119  f04f		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    118  f04f					      REPEND
    119  f051		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    120  f053					      REPEND
    121  f053		       a9 00		      lda	#0
    122  f055
    123  f055		       85 00		      sta	VSYNC	; turn off VSYNC
    124  f057					      REPEAT	33
    125  f057		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f057					      REPEND
    125  f059		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f059					      REPEND
    125  f05b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f05b					      REPEND
    125  f05d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f05d					      REPEND
    125  f05f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f05f					      REPEND
    125  f061		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f061					      REPEND
    125  f063		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f063					      REPEND
    125  f065		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f065					      REPEND
    125  f067		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f067					      REPEND
    125  f069		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f069					      REPEND
    125  f06b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f06b					      REPEND
    125  f06d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f06d					      REPEND
    125  f06f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f06f					      REPEND
    125  f071		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f071					      REPEND
    125  f073		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f073					      REPEND
    125  f075		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f075					      REPEND
    125  f077		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f077					      REPEND
    125  f079		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f079					      REPEND
    125  f07b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f07b					      REPEND
    125  f07d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f07d					      REPEND
    125  f07f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f07f					      REPEND
    125  f081		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f081					      REPEND
    125  f083		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f083					      REPEND
    125  f085		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f085					      REPEND
    125  f087		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f087					      REPEND
    125  f089		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f089					      REPEND
    125  f08b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f08b					      REPEND
    125  f08d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f08d					      REPEND
    125  f08f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f08f					      REPEND
    125  f091		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f091					      REPEND
    125  f093		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f093					      REPEND
    125  f095		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    124  f095					      REPEND
    125  f097		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    126  f099					      REPEND
    127  f099
    128  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f099							;; Calculations and tasks performed in the VBlank
    130  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f099		       a5 80		      lda	JetXPos
    132  f09b		       a0 00		      ldy	#0
    133  f09d		       20 75 f2 	      jsr	SetObjectXPos	; set player0 horizontal position <jump subroutine>
    134  f0a0
    135  f0a0		       a5 82		      lda	BomberXPos
    136  f0a2		       a0 01		      ldy	#1
    137  f0a4		       20 75 f2 	      jsr	SetObjectXPos	; set player1 horizontal position <jump subroutine>
    138  f0a7
    139  f0a7		       a5 84		      lda	MissileXPos
    140  f0a9		       a0 02		      ldy	#2
    141  f0ab		       20 75 f2 	      jsr	SetObjectXPos	; set missile horizontal position <jump subroutine>
    142  f0ae
    143  f0ae		       20 b2 f2 	      jsr	CalculateDigitOffset	; calculate scoreboard digits lookup table offset
    144  f0b1
    145  f0b1		       85 02		      sta	WSYNC
    146  f0b3		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    147  f0b5
    148  f0b5		       a9 00		      lda	#0
    149  f0b7		       85 01		      sta	VBLANK	; turn off VBLANK
    150  f0b9
    151  f0b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    152  f0b9							;; Display the scoreboard lines
    153  f0b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    154  f0b9		       a9 00		      lda	#0	; reset TIA registers before displaying the score
    155  f0bb		       85 09		      sta	COLUBK
    156  f0bd		       85 0d		      sta	PF0
    157  f0bf		       85 0e		      sta	PF1
    158  f0c1		       85 0f		      sta	PF2
    159  f0c3		       85 1b		      sta	GRP0
    160  f0c5		       85 1c		      sta	GRP1
    161  f0c7		       85 0a		      sta	CTRLPF
    162  f0c9
    163  f0c9		       a9 1e		      lda	#$1E
    164  f0cb		       85 08		      sta	COLUPF	; set the scoreboard playfield color with yellow
    165  f0cd
    166  f0cd		       a2 05		      ldx	#DIGITS_HEIGHT	; start X counter with 5 (height of digits)
    167  f0cf
    168  f0cf				   .ScoreDigitLoop
    169  f0cf		       a4 8b		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    170  f0d1		       b9 d3 f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    171  f0d4		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    172  f0d6		       85 97		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    173  f0d8
    174  f0d8		       a4 89		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    175  f0da		       b9 d3 f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    176  f0dd		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    177  f0df		       05 97		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    178  f0e1		       85 97		      sta	ScoreSprite	; and save it
    179  f0e3		       85 02		      sta	WSYNC	; wait for the end of scanline
    180  f0e5		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    181  f0e7
    182  f0e7		       a4 8c		      ldy	TensDigitOffset+1	; get the left digit offset for the Timer
    183  f0e9		       b9 d3 f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    184  f0ec		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    185  f0ee		       85 98		      sta	TimerSprite	; save the timer tens digit pattern in a variable
    186  f0f0
    187  f0f0		       a4 8a		      ldy	OnesDigitOffset+1	; get the ones digit offset for the Timer
    188  f0f2		       b9 d3 f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    189  f0f5		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    190  f0f7		       05 98		      ora	TimerSprite	; merge with the saved tens digit graphics
    191  f0f9		       85 98		      sta	TimerSprite	; and save it
    192  f0fb
    193  f0fb		       20 d2 f2 	      jsr	Sleep12Cycles	; wastes some cycles
    194  f0fe
    195  f0fe		       85 0e		      sta	PF1	; update the playfield for Timer display
    196  f100
    197  f100		       a4 97		      ldy	ScoreSprite	; preload for the next scanline
    198  f102		       85 02		      sta	WSYNC	; wait for next scanline
    199  f104
    200  f104		       84 0e		      sty	PF1	; update playfield for the score display
    201  f106		       e6 8b		      inc	TensDigitOffset
    202  f108		       e6 8c		      inc	TensDigitOffset+1
    203  f10a		       e6 89		      inc	OnesDigitOffset
    204  f10c		       e6 8a		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    205  f10e
    206  f10e		       20 d2 f2 	      jsr	Sleep12Cycles	; waste some cycles
    207  f111
    208  f111		       ca		      dex		; X--
    209  f112		       85 0e		      sta	PF1	; update the playfield for the Timer display
    210  f114		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    211  f116
    212  f116		       85 02		      sta	WSYNC
    213  f118
    214  f118		       a9 00		      lda	#0
    215  f11a		       85 0d		      sta	PF0
    216  f11c		       85 0e		      sta	PF1
    217  f11e		       85 0f		      sta	PF2
    218  f120		       85 02		      sta	WSYNC
    219  f122		       85 02		      sta	WSYNC
    220  f124		       85 02		      sta	WSYNC	; three lines of padding
    221  f126
    222  f126							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    223  f126							;; Display the remaining visible scanlines of our main game (2-line kernel)
    224  f126							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    225  f126				   GameVisibleLine
    226  f126		       a5 99		      lda	TerrainColor
    227  f128		       85 08		      sta	COLUPF	; set the terrain background color
    228  f12a
    229  f12a		       a5 9a		      lda	RiverColor
    230  f12c		       85 09		      sta	COLUBK	; set the river background color
    231  f12e
    232  f12e		       a9 01		      lda	#%00000001
    233  f130		       85 0a		      sta	CTRLPF	; enable playfield reflection
    234  f132		       a9 f0		      lda	#$F0
    235  f134		       85 0d		      sta	PF0	; setting PF0 bit pattern
    236  f136		       a9 fc		      lda	#$FC
    237  f138		       85 0e		      sta	PF1	; setting PF1 bit pattern
    238  f13a		       a9 00		      lda	#0
    239  f13c		       85 0f		      sta	PF2	; setting PF2 bit pattern
    240  f13e
    241  f13e		       a2 55		      ldx	#85	; X counts the number of remaining scanlines
    242  f140				   .GameLineLoop		; inside GameVisibleLine label
      0  f140					      DRAW_MISSILE		; macro to check if we should draw the missile
      1  f140		       a9 00		      lda	#%00000000
      2  f142		       e4 85		      cpx	MissileYPos
      3  f144		       d0 04		      bne	.SkipMissileDraw
      4  f146				   .DrawMissile
      5  f146		       a9 02		      lda	#%00000010
      6  f148		       e6 85		      inc	MissileYPos
      7  f14a				   .SkipMissileDraw
      8  f14a		       85 1d		      sta	ENAM0
    244  f14c
    245  f14c				   .AreWeInsideJetSprite		; check if should render sprite player0
    246  f14c		       8a		      txa		; transfer X to A
    247  f14d		       38		      sec		; make sure carry flag is set
    248  f14e		       e5 81		      sbc	JetYPos	; subtract sprite Y coordinate
    249  f150		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height bounds?
    250  f152		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call subroutine
    251  f154		       a9 00		      lda	#0	; else, set lookup index to 0
    252  f156				   .DrawSpriteP0
    253  f156		       18		      clc		; clears carry flag before addition
    254  f157		       65 95		      adc	JetAnimOffset	; jumps to correct sprite frame in memory
    255  f159		       a8		      tay		; load Y so we can work with pointer
    256  f15a		       b1 8d		      lda	(JetSpritePtr),Y	; load player bitmap slice of data
    257  f15c		       85 02		      sta	WSYNC	; wait for next scanline
    258  f15e		       85 1b		      sta	GRP0	; set graphics for player 0
    259  f160		       b1 8f		      lda	(JetColorPtr),Y	; load player color from lookup table
    260  f162		       85 06		      sta	COLUP0	; set color for player 0 slice
    261  f164
    262  f164				   .AreWeInsideBomberSprite		; check if should render sprite player1
    263  f164		       8a		      txa		; transfer X to A
    264  f165		       38		      sec		; make sure carry flag is set
    265  f166		       e5 83		      sbc	BomberYPos	; subtract sprite Y coordinate
    266  f168		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height bounds?
    267  f16a		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call subroutine
    268  f16c		       a9 00		      lda	#0	; else, set index to 0
    269  f16e				   .DrawSpriteP1
    270  f16e		       a8		      tay
    271  f16f		       a9 05		      lda	#%0000101
    272  f171		       85 05		      sta	NUSIZ1	; stretch player1 sprite
    273  f173		       b1 91		      lda	(BomberSpritePtr),Y	; load player bitmap slice of data
    274  f175		       85 02		      sta	WSYNC	; wait for next scanline
    275  f177		       85 1c		      sta	GRP1	; set graphics for player 0
    276  f179		       b1 93		      lda	(BomberColorPtr),Y	; load player color from lookup table
    277  f17b		       85 07		      sta	COLUP1	; set color for player 0 slice
    278  f17d
    279  f17d		       ca		      dex		; X--
    280  f17e		       d0 c0		      bne	.GameLineLoop	; repeat next main game scanline until finished
    281  f180
    282  f180		       a9 00		      lda	#0
    283  f182		       85 95		      sta	JetAnimOffset	; reset jet animation frame to zero each frame
    284  f184
    285  f184		       85 02		      sta	WSYNC	; wait for final scanline
    286  f186
    287  f186							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    288  f186							;; Display Overscan
    289  f186							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    290  f186		       a9 02		      lda	#2
    291  f188		       85 01		      sta	VBLANK	; turn on VBLANK again
    292  f18a					      REPEAT	30
    293  f18a		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f18a					      REPEND
    293  f18c		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f18c					      REPEND
    293  f18e		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f18e					      REPEND
    293  f190		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f190					      REPEND
    293  f192		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f192					      REPEND
    293  f194		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f194					      REPEND
    293  f196		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f196					      REPEND
    293  f198		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f198					      REPEND
    293  f19a		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f19a					      REPEND
    293  f19c		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f19c					      REPEND
    293  f19e		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f19e					      REPEND
    293  f1a0		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1a0					      REPEND
    293  f1a2		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1a2					      REPEND
    293  f1a4		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1a4					      REPEND
    293  f1a6		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1a6					      REPEND
    293  f1a8		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1a8					      REPEND
    293  f1aa		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1aa					      REPEND
    293  f1ac		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1ac					      REPEND
    293  f1ae		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1ae					      REPEND
    293  f1b0		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1b0					      REPEND
    293  f1b2		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1b2					      REPEND
    293  f1b4		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1b4					      REPEND
    293  f1b6		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1b6					      REPEND
    293  f1b8		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1b8					      REPEND
    293  f1ba		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1ba					      REPEND
    293  f1bc		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1bc					      REPEND
    293  f1be		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1be					      REPEND
    293  f1c0		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1c0					      REPEND
    293  f1c2		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    292  f1c2					      REPEND
    293  f1c4		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    294  f1c6					      REPEND
    295  f1c6		       a9 00		      lda	#0
    296  f1c8		       85 01		      sta	VBLANK	; turn off VBLANK
    297  f1ca
    298  f1ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    299  f1ca							;; Process joystick input for player 0 up/down/left/right
    300  f1ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    301  f1ca				   CheckP0Up
    302  f1ca		       a9 10		      lda	#%00010000	; if player 0 joystick up
    303  f1cc		       2c 80 02 	      bit	SWCHA
    304  f1cf		       d0 0c		      bne	CheckP0Down
    305  f1d1		       a5 81		      lda	JetYPos
    306  f1d3		       c9 46		      cmp	#70	; if (player0 Y position > 70)
    307  f1d5		       10 06		      bpl	CheckP0Down	;    then: skip increment
    308  f1d7				   .P0UpPressed
    309  f1d7		       e6 81		      inc	JetYPos	;    else: increment Y position
    310  f1d9		       a9 00		      lda	#0
    311  f1db		       85 95		      sta	JetAnimOffset	; set jet animation frame to zero
    312  f1dd
    313  f1dd				   CheckP0Down
    314  f1dd		       a9 20		      lda	#%00100000	; if player 0 joystick down
    315  f1df		       2c 80 02 	      bit	SWCHA
    316  f1e2		       d0 0c		      bne	CheckP0Left
    317  f1e4		       a5 81		      lda	JetYPos
    318  f1e6		       c9 05		      cmp	#5	; if (player0 Y position < 5)
    319  f1e8		       30 06		      bmi	CheckP0Left	;    then: skip decrement
    320  f1ea				   .P0DownPressed
    321  f1ea		       c6 81		      dec	JetYPos	;    else: decrement Y position
    322  f1ec		       a9 00		      lda	#0
    323  f1ee		       85 95		      sta	JetAnimOffset	; set jet animation frame to zero
    324  f1f0
    325  f1f0				   CheckP0Left
    326  f1f0		       a9 40		      lda	#%01000000	; if player 0 joystick left
    327  f1f2		       2c 80 02 	      bit	SWCHA
    328  f1f5		       d0 0c		      bne	CheckP0Right
    329  f1f7		       a5 80		      lda	JetXPos
    330  f1f9		       c9 23		      cmp	#35	; if (player0 X position < 35)
    331  f1fb		       30 06		      bmi	CheckP0Right	;    then: skip decrement
    332  f1fd				   .P0LeftPressed
    333  f1fd		       c6 80		      dec	JetXPos	;    else: decrement X position
    334  f1ff		       a5 09		      lda	JET_HEIGHT
    335  f201		       85 95		      sta	JetAnimOffset	; set new offset to display second sprite frame
    336  f203
    337  f203				   CheckP0Right
    338  f203		       a9 80		      lda	#%10000000	; if player 0 joystick right
    339  f205		       2c 80 02 	      bit	SWCHA
    340  f208		       d0 0c		      bne	CheckButtonPressed
    341  f20a		       a5 80		      lda	JetXPos
    342  f20c		       c9 64		      cmp	#100	; if (player0 X position > 100)
    343  f20e		       10 06		      bpl	CheckButtonPressed	;    then: skip increment
    344  f210				   .P0RightPressed
    345  f210		       e6 80		      inc	JetXPos	;    else: increment X position
    346  f212		       a5 09		      lda	JET_HEIGHT
    347  f214		       85 95		      sta	JetAnimOffset	; set new offset to display second sprite frame
    348  f216
    349  f216				   CheckButtonPressed
    350  f216		       a9 80		      lda	#%10000000	; if button is pressed
    351  f218		       24 0c		      bit	INPT4
    352  f21a		       d0 0e		      bne	EndInputCheck
    353  f21c				   .ButtonPressed
    354  f21c		       a5 80		      lda	JetXPos
    355  f21e		       18		      clc
    356  f21f		       69 05		      adc	#5
    357  f221		       85 84		      sta	MissileXPos	; set the missile X position equal to the player 0
    358  f223		       a5 81		      lda	JetYPos
    359  f225		       18		      clc
    360  f226		       69 08		      adc	#8
    361  f228		       85 85		      sta	MissileYPos	; set the missile Y position equal to the player 0
    362  f22a
    363  f22a				   EndInputCheck		; fallback when no input was performed
    364  f22a
    365  f22a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    366  f22a							;; Calculations to update position for next frame
    367  f22a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  f22a				   UpdateBomberPosition
    369  f22a		       a5 83		      lda	BomberYPos
    370  f22c		       18		      clc
    371  f22d		       c9 00		      cmp	#0	; compare bomber y-position with 0
    372  f22f		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    373  f231		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame
    374  f233		       4c 42 f2 	      jmp	EndPositionUpdate
    375  f236				   .ResetBomberPosition
    376  f236		       20 94 f2 	      jsr	GetRandomBomberPos	; call subroutine for random bomber x-position
    377  f239
    378  f239				   .SetScoreValues
    379  f239		       f8		      sed		; set BCD mode for score and timer values
    380  f23a							;lda Score
    381  f23a							;clc
    382  f23a							;adc #1
    383  f23a							;sta Score		   ; add 1 to the Score (BCD does not like INC)
    384  f23a		       a5 87		      lda	Timer
    385  f23c		       18		      clc
    386  f23d		       69 01		      adc	#1
    387  f23f		       85 87		      sta	Timer	; add 1 to the Timer (BCD does not like INC)
    388  f241		       d8		      cld		; disable BCD after updating Score and Timer
    389  f242
    390  f242				   EndPositionUpdate		; fallback for the position update code
    391  f242
    392  f242							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    393  f242							;; Check for object collision
    394  f242							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    395  f242				   CheckCollisionP0P1
    396  f242		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    397  f244		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    398  f246		       d0 06		      bne	.P0P1Collided	; if collision between P0 and P1 happened, skip
    399  f248		       20 6c f2 	      jsr	SetTerrainRiverColor	; else, set river/terrain to green/blue
    400  f24b		       4c 51 f2 	      jmp	CheckCollisionM0P1	; check next possible collision
    401  f24e				   .P0P1Collided
    402  f24e		       20 89 f2 	      jsr	GameOver	; call GameOver subroutine
    403  f251
    404  f251				   CheckCollisionM0P1
    405  f251		       a9 80		      lda	#%10000000	; CXM0P bit 7 detects M0 and P1 collision
    406  f253		       24 00		      bit	CXM0P	; check CXM0P bit 7 with the above pattern
    407  f255		       d0 03		      bne	.M0P1Collided	; collision missile 0 and player 1 happened
    408  f257		       4c 67 f2 	      jmp	EndCollisionCheck
    409  f25a				   .M0P1Collided
    410  f25a		       f8		      sed
    411  f25b		       a5 86		      lda	Score
    412  f25d		       18		      clc
    413  f25e		       69 01		      adc	#1
    414  f260		       85 86		      sta	Score	; adds 1 to the Score using decimal mode
    415  f262		       d8		      cld		; disable decimal mode
    416  f263		       a9 00		      lda	#0
    417  f265		       85 85		      sta	MissileYPos	; reset the missile position
    418  f267
    419  f267				   EndCollisionCheck		; fallback
    420  f267		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    421  f269
    422  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    423  f269							;; Loop back to start a brand new frame
    424  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    425  f269		       4c 47 f0 	      jmp	StartFrame	; continue to display the next frame
    426  f26c
    427  f26c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    428  f26c							;; Set the colors for the terrain and river to green & blue
    429  f26c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    430  f26c				   SetTerrainRiverColor subroutine
    431  f26c		       a9 c2		      lda	#$C2
    432  f26e		       85 99		      sta	TerrainColor	; set terrain color to green
    433  f270		       a9 84		      lda	#$84
    434  f272		       85 9a		      sta	RiverColor	; set river color to blue
    435  f274		       60		      rts
    436  f275
    437  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    438  f275							;; Subroutine to handle object horizontal position with fine offset
    439  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    440  f275							;; A is the target x-coordinate position in pixels of our object
    441  f275							;; Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    442  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    443  f275				   SetObjectXPos subroutine
    444  f275		       85 02		      sta	WSYNC	; start a fresh new scanline
    445  f277		       38		      sec		; make sure carry-flag is set before subtraction
    446  f278				   .Div15Loop
    447  f278		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    448  f27a		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    449  f27c		       49 07		      eor	#7	; handle offset range from -8 to 7
    450  f27e		       0a		      asl
    451  f27f		       0a		      asl
    452  f280		       0a		      asl
    453  f281		       0a		      asl		; four shift lefts to get only the top 4 bits
    454  f282		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    455  f285		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    456  f288		       60		      rts		; return to the memory address that called the subroutine
    457  f289
    458  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    459  f289							;; Game Over subroutine
    460  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    461  f289				   GameOver   subroutine
    462  f289		       a9 30		      lda	#$30
    463  f28b		       85 99		      sta	TerrainColor	; set terrain color to red
    464  f28d		       85 9a		      sta	RiverColor	; set river color to red
    465  f28f		       a9 00		      lda	#0
    466  f291		       85 86		      sta	Score	; Score = 0
    467  f293		       60		      rts
    468  f294
    469  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    470  f294							;; Subroutine to generate a Linear-Feedback Shift Register random number
    471  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    472  f294							;; Generate a LFSR random number for the X-position of the bomber.
    473  f294							;; Divide the random value by 4 to limit the size of the result to match river.
    474  f294							;; Add 30 to compensate for the left green playfield
    475  f294							;; The routine also sets the Y-position of the bomber to the top of the screen.
    476  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    477  f294				   GetRandomBomberPos subroutine
    478  f294		       a5 96		      lda	Random
    479  f296		       0a		      asl		; arithmetic shift left
    480  f297		       45 96		      eor	Random	; exclusive OR
    481  f299		       0a		      asl
    482  f29a		       45 96		      eor	Random
    483  f29c		       0a		      asl
    484  f29d		       0a		      asl
    485  f29e		       45 96		      eor	Random
    486  f2a0		       0a		      asl
    487  f2a1		       26 96		      rol	Random	; performs a series of shifts and bit operations
    488  f2a3
    489  f2a3		       4a		      lsr		; logic shift right
    490  f2a4		       4a		      lsr		; divide the value by 4 with 2 right shifts
    491  f2a5		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    492  f2a7		       a9 1e		      lda	#30
    493  f2a9		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    494  f2ab		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    495  f2ad
    496  f2ad		       a9 60		      lda	#96
    497  f2af		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    498  f2b1
    499  f2b1		       60		      rts		; return from subroutine
    500  f2b2
    501  f2b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    502  f2b2							;; Subroutine to handle scoreboard digits to be displayed on the screen
    503  f2b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    504  f2b2							;; The scoreboard is stored using BCD, so the display shows hex numbers.
    505  f2b2							;; This converts the high and low nibbles of the variable Score and Timer
    506  f2b2							;; into the offsets of digits lookup table so the values can be displayed.
    507  f2b2							;; Each digit has a height of 5 bytes in the lookup table.
    508  f2b2							;;
    509  f2b2							;; For the low nibble we need to multiply by 5
    510  f2b2							;;   - we can use left shifts to perform multiplication by 2
    511  f2b2							;;   - for any number N, the value of N*5 = (N*2*2)+N
    512  f2b2							;;
    513  f2b2							;; For the upper nibble, since its already times 16, we need to divide it
    514  f2b2							;; and then multiply by 5:
    515  f2b2							;;   - we can use right shifts to perform division by 2
    516  f2b2							;;   - for any number N, the value of (N/16)*5 is equal to (N/4)+(N/16)
    517  f2b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    518  f2b2				   CalculateDigitOffset subroutine
    519  f2b2		       a2 01		      ldx	#1	; X register is the loop counter
    520  f2b4				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    521  f2b4
    522  f2b4		       b5 86		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    523  f2b6		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    524  f2b8		       85 88		      sta	Temp	; save the value of A into Temp
    525  f2ba		       0a		      asl		; shift left (it is now N*2)
    526  f2bb		       0a		      asl		; shift left (it is now N*4)
    527  f2bc		       65 88		      adc	Temp	; add the value saved in Temp (+N)
    528  f2be		       95 89		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    529  f2c0
    530  f2c0		       b5 86		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    531  f2c2		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    532  f2c4		       4a		      lsr		; shift right (it is now N/2)
    533  f2c5		       4a		      lsr		; shift right (it is now N/4)
    534  f2c6		       85 88		      sta	Temp	; save the value of A into Temp
    535  f2c8		       4a		      lsr		; shift right (it is now N/8)
    536  f2c9		       4a		      lsr		; shift right (it is now N/16)
    537  f2ca		       65 88		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    538  f2cc		       95 8b		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    539  f2ce
    540  f2ce		       ca		      dex		; X--
    541  f2cf		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    542  f2d1
    543  f2d1		       60		      rts
    544  f2d2
    545  f2d2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    546  f2d2							;; Subroutine to waste 12 cycles
    547  f2d2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    548  f2d2							;; jsr takes 6 cycles
    549  f2d2							;; rts takes 6 cycles
    550  f2d2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    551  f2d2				   Sleep12Cycles subroutine
    552  f2d2		       60		      rts
    553  f2d3
    554  f2d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    555  f2d3							;; Declare ROM lookup tables
    556  f2d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    557  f2d3				   Digits
    558  f2d3		       77		      .byte.b	%01110111	; ### ###
    559  f2d4		       55		      .byte.b	%01010101	; # # # #
    560  f2d5		       55		      .byte.b	%01010101	; # # # #
    561  f2d6		       55		      .byte.b	%01010101	; # # # #
    562  f2d7		       77		      .byte.b	%01110111	; ### ###
    563  f2d8
    564  f2d8		       11		      .byte.b	%00010001	;   #	 #
    565  f2d9		       11		      .byte.b	%00010001	;   #	 #
    566  f2da		       11		      .byte.b	%00010001	;   #	 #
    567  f2db		       11		      .byte.b	%00010001	;   #	 #
    568  f2dc		       11		      .byte.b	%00010001	;   #	 #
    569  f2dd
    570  f2dd		       77		      .byte.b	%01110111	; ### ###
    571  f2de		       11		      .byte.b	%00010001	;   #	 #
    572  f2df		       77		      .byte.b	%01110111	; ### ###
    573  f2e0		       44		      .byte.b	%01000100	; #   #
    574  f2e1		       77		      .byte.b	%01110111	; ### ###
    575  f2e2
    576  f2e2		       77		      .byte.b	%01110111	; ### ###
    577  f2e3		       11		      .byte.b	%00010001	;   #	 #
    578  f2e4		       33		      .byte.b	%00110011	;  ##	##
    579  f2e5		       11		      .byte.b	%00010001	;   #	 #
    580  f2e6		       77		      .byte.b	%01110111	; ### ###
    581  f2e7
    582  f2e7		       55		      .byte.b	%01010101	; # # # #
    583  f2e8		       55		      .byte.b	%01010101	; # # # #
    584  f2e9		       77		      .byte.b	%01110111	; ### ###
    585  f2ea		       11		      .byte.b	%00010001	;   #	 #
    586  f2eb		       11		      .byte.b	%00010001	;   #	 #
    587  f2ec
    588  f2ec		       77		      .byte.b	%01110111	; ### ###
    589  f2ed		       44		      .byte.b	%01000100	; #   #
    590  f2ee		       77		      .byte.b	%01110111	; ### ###
    591  f2ef		       11		      .byte.b	%00010001	;   #	 #
    592  f2f0		       77		      .byte.b	%01110111	; ### ###
    593  f2f1
    594  f2f1		       77		      .byte.b	%01110111	; ### ###
    595  f2f2		       44		      .byte.b	%01000100	; #   #
    596  f2f3		       77		      .byte.b	%01110111	; ### ###
    597  f2f4		       55		      .byte.b	%01010101	; # # # #
    598  f2f5		       77		      .byte.b	%01110111	; ### ###
    599  f2f6
    600  f2f6		       77		      .byte.b	%01110111	; ### ###
    601  f2f7		       11		      .byte.b	%00010001	;   #	 #
    602  f2f8		       11		      .byte.b	%00010001	;   #	 #
    603  f2f9		       11		      .byte.b	%00010001	;   #	 #
    604  f2fa		       11		      .byte.b	%00010001	;   #	 #
    605  f2fb
    606  f2fb		       77		      .byte.b	%01110111	; ### ###
    607  f2fc		       55		      .byte.b	%01010101	; # # # #
    608  f2fd		       77		      .byte.b	%01110111	; ### ###
    609  f2fe		       55		      .byte.b	%01010101	; # # # #
    610  f2ff		       77		      .byte.b	%01110111	; ### ###
    611  f300
    612  f300		       77		      .byte.b	%01110111	; ### ###
    613  f301		       55		      .byte.b	%01010101	; # # # #
    614  f302		       77		      .byte.b	%01110111	; ### ###
    615  f303		       11		      .byte.b	%00010001	;   #	 #
    616  f304		       77		      .byte.b	%01110111	; ### ###
    617  f305
    618  f305		       22		      .byte.b	%00100010	;  #	#
    619  f306		       55		      .byte.b	%01010101	; # # # #
    620  f307		       77		      .byte.b	%01110111	; ### ###
    621  f308		       55		      .byte.b	%01010101	; # # # #
    622  f309		       55		      .byte.b	%01010101	; # # # #
    623  f30a
    624  f30a		       77		      .byte.b	%01110111	; ### ###
    625  f30b		       55		      .byte.b	%01010101	; # # # #
    626  f30c		       66		      .byte.b	%01100110	; ##  ##
    627  f30d		       55		      .byte.b	%01010101	; # # # #
    628  f30e		       77		      .byte.b	%01110111	; ### ###
    629  f30f
    630  f30f		       77		      .byte.b	%01110111	; ### ###
    631  f310		       44		      .byte.b	%01000100	; #   #
    632  f311		       44		      .byte.b	%01000100	; #   #
    633  f312		       44		      .byte.b	%01000100	; #   #
    634  f313		       77		      .byte.b	%01110111	; ### ###
    635  f314
    636  f314		       66		      .byte.b	%01100110	; ##  ##
    637  f315		       55		      .byte.b	%01010101	; # # # #
    638  f316		       55		      .byte.b	%01010101	; # # # #
    639  f317		       55		      .byte.b	%01010101	; # # # #
    640  f318		       66		      .byte.b	%01100110	; ##  ##
    641  f319
    642  f319		       77		      .byte.b	%01110111	; ### ###
    643  f31a		       44		      .byte.b	%01000100	; #   #
    644  f31b		       77		      .byte.b	%01110111	; ### ###
    645  f31c		       44		      .byte.b	%01000100	; #   #
    646  f31d		       77		      .byte.b	%01110111	; ### ###
    647  f31e
    648  f31e		       77		      .byte.b	%01110111	; ### ###
    649  f31f		       44		      .byte.b	%01000100	; #   #
    650  f320		       66		      .byte.b	%01100110	; ##  ##
    651  f321		       44		      .byte.b	%01000100	; #   #
    652  f322		       44		      .byte.b	%01000100	; #   #
    653  f323
    654  f323				   JetSprite
    655  f323		       00		      .byte.b	#%00000000	;
    656  f324		       14		      .byte.b	#%00010100	;   # #
    657  f325		       7f		      .byte.b	#%01111111	; #######
    658  f326		       3e		      .byte.b	#%00111110	;  #####
    659  f327		       1c		      .byte.b	#%00011100	;   ###
    660  f328		       1c		      .byte.b	#%00011100	;   ###
    661  f329		       08		      .byte.b	#%00001000	;    #
    662  f32a		       08		      .byte.b	#%00001000	;    #
    663  f32b		       08		      .byte.b	#%00001000	;    #
    664  f32c
    665  f32c				   JetSpriteTurn
    666  f32c		       00		      .byte.b	#%00000000	;
    667  f32d		       08		      .byte.b	#%00001000	;    #
    668  f32e		       3e		      .byte.b	#%00111110	;  #####
    669  f32f		       1c		      .byte.b	#%00011100	;   ###
    670  f330		       1c		      .byte.b	#%00011100	;   ###
    671  f331		       1c		      .byte.b	#%00011100	;   ###
    672  f332		       08		      .byte.b	#%00001000	;    #
    673  f333		       08		      .byte.b	#%00001000	;    #
    674  f334		       08		      .byte.b	#%00001000	;    #
    675  f335
    676  f335				   BomberSprite
    677  f335		       00		      .byte.b	#%00000000	;
    678  f336		       08		      .byte.b	#%00001000	;    #
    679  f337		       08		      .byte.b	#%00001000	;    #
    680  f338		       2a		      .byte.b	#%00101010	;  # # #
    681  f339		       3e		      .byte.b	#%00111110	;  #####
    682  f33a		       7f		      .byte.b	#%01111111	; #######
    683  f33b		       2a		      .byte.b	#%00101010	;  # # #
    684  f33c		       08		      .byte.b	#%00001000	;    #
    685  f33d		       1c		      .byte.b	#%00011100	;   ###
    686  f33e
    687  f33e				   JetColor
    688  f33e		       00		      .byte.b	#$00
    689  f33f		       fe		      .byte.b	#$FE
    690  f340		       0c		      .byte.b	#$0C
    691  f341		       0e		      .byte.b	#$0E
    692  f342		       0e		      .byte.b	#$0E
    693  f343		       04		      .byte.b	#$04
    694  f344		       ba		      .byte.b	#$BA
    695  f345		       0e		      .byte.b	#$0E
    696  f346		       08		      .byte.b	#$08
    697  f347
    698  f347				   JetColorTurn
    699  f347		       00		      .byte.b	#$00
    700  f348		       fe		      .byte.b	#$FE
    701  f349		       0c		      .byte.b	#$0C
    702  f34a		       0e		      .byte.b	#$0E
    703  f34b		       0e		      .byte.b	#$0E
    704  f34c		       04		      .byte.b	#$04
    705  f34d		       0e		      .byte.b	#$0E
    706  f34e		       0e		      .byte.b	#$0E
    707  f34f		       08		      .byte.b	#$08
    708  f350
    709  f350				   BomberColor
    710  f350		       00		      .byte.b	#$00
    711  f351		       32		      .byte.b	#$32
    712  f352		       32		      .byte.b	#$32
    713  f353		       0e		      .byte.b	#$0E
    714  f354		       40		      .byte.b	#$40
    715  f355		       40		      .byte.b	#$40
    716  f356		       40		      .byte.b	#$40
    717  f357		       40		      .byte.b	#$40
    718  f358		       40		      .byte.b	#$40
    719  f359
    720  f359							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    721  f359							;; Complete ROM size with exactly 4KB
    722  f359							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    723  fffc					      org	$FFFC	; move to position $FFFC
    724  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    725  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
