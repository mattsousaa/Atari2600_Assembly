------- FILE screen_obj.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with register mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE screen_obj.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE screen_obj.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Start an uninitialized segment at $80 for var declaration.
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U0082 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080		       00	   P0Height   .byte.b		; defines one byte for player 0 height
     15 U0081		       00	   P1Height   .byte.b		; defines one byte for player 1 height
     16 U0082
     17 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18 U0082							;; Start our ROM code segment starting at $F000.
     19 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  10000 ????				       seg	Code
     21  f000					      org	$F000
     22  f000
     23  f000				   Reset
      0  f000					      CLEAN_START		; macro to clean memory and TIA
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     25  f00b
     26  f00b		       a2 80		      ldx	#$80	; blue background color
     27  f00d		       86 09		      stx	COLUBK
     28  f00f
     29  f00f		       a9 0f		      lda	#%1111	; white playfield color
     30  f011		       85 08		      sta	COLUPF
     31  f013
     32  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  f013							;; Initialize P0Height and P1Height with the value 10.
     34  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f013		       a9 0a		      lda	#10	; A = 10
     36  f015		       85 80		      sta	P0Height	; P0Height = A
     37  f017		       85 81		      sta	P1Height	; P1Height = A
     38  f019
     39  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40  f019							;; We set the TIA registers for the colors of P0 and P1.
     41  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  f019		       a9 48		      lda	#$48	; player 0 color light red
     43  f01b		       85 06		      sta	COLUP0
     44  f01d
     45  f01d		       a9 c6		      lda	#$C6	; player 1 color light green
     46  f01f		       85 07		      sta	COLUP1
     47  f021
     48  f021		       a0 02		      ldy	#%00000010	; CTRLPF D1 set to 1 means (score)
     49  f023		       84 0a		      sty	CTRLPF
     50  f025
     51  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f025							;; Start a new frame by configuring VBLANK and VSYNC
     53  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f025				   StartFrame
     55  f025		       a9 02		      lda	#2
     56  f027		       85 01		      sta	VBLANK	; turn VBLANK on
     57  f029		       85 00		      sta	VSYNC	; turn VSYNC on
     58  f02b
     59  f02b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f02b					      REPEAT	3
     61  f02b		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     60  f02b					      REPEND
     61  f02d		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     60  f02d					      REPEND
     61  f02f		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     62  f031					      REPEND
     63  f031
     64  f031		       a9 00		      lda	#0
     65  f033		       85 00		      sta	VSYNC	; turn VSYNC off
     66  f035
     67  f035							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  f035							;; Let the TIA output the 37 recommended lines of VBLANK
     69  f035							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     70  f035					      REPEAT	37
     71  f035		       85 02		      sta	WSYNC
     70  f035					      REPEND
     71  f037		       85 02		      sta	WSYNC
     70  f037					      REPEND
     71  f039		       85 02		      sta	WSYNC
     70  f039					      REPEND
     71  f03b		       85 02		      sta	WSYNC
     70  f03b					      REPEND
     71  f03d		       85 02		      sta	WSYNC
     70  f03d					      REPEND
     71  f03f		       85 02		      sta	WSYNC
     70  f03f					      REPEND
     71  f041		       85 02		      sta	WSYNC
     70  f041					      REPEND
     71  f043		       85 02		      sta	WSYNC
     70  f043					      REPEND
     71  f045		       85 02		      sta	WSYNC
     70  f045					      REPEND
     71  f047		       85 02		      sta	WSYNC
     70  f047					      REPEND
     71  f049		       85 02		      sta	WSYNC
     70  f049					      REPEND
     71  f04b		       85 02		      sta	WSYNC
     70  f04b					      REPEND
     71  f04d		       85 02		      sta	WSYNC
     70  f04d					      REPEND
     71  f04f		       85 02		      sta	WSYNC
     70  f04f					      REPEND
     71  f051		       85 02		      sta	WSYNC
     70  f051					      REPEND
     71  f053		       85 02		      sta	WSYNC
     70  f053					      REPEND
     71  f055		       85 02		      sta	WSYNC
     70  f055					      REPEND
     71  f057		       85 02		      sta	WSYNC
     70  f057					      REPEND
     71  f059		       85 02		      sta	WSYNC
     70  f059					      REPEND
     71  f05b		       85 02		      sta	WSYNC
     70  f05b					      REPEND
     71  f05d		       85 02		      sta	WSYNC
     70  f05d					      REPEND
     71  f05f		       85 02		      sta	WSYNC
     70  f05f					      REPEND
     71  f061		       85 02		      sta	WSYNC
     70  f061					      REPEND
     71  f063		       85 02		      sta	WSYNC
     70  f063					      REPEND
     71  f065		       85 02		      sta	WSYNC
     70  f065					      REPEND
     71  f067		       85 02		      sta	WSYNC
     70  f067					      REPEND
     71  f069		       85 02		      sta	WSYNC
     70  f069					      REPEND
     71  f06b		       85 02		      sta	WSYNC
     70  f06b					      REPEND
     71  f06d		       85 02		      sta	WSYNC
     70  f06d					      REPEND
     71  f06f		       85 02		      sta	WSYNC
     70  f06f					      REPEND
     71  f071		       85 02		      sta	WSYNC
     70  f071					      REPEND
     71  f073		       85 02		      sta	WSYNC
     70  f073					      REPEND
     71  f075		       85 02		      sta	WSYNC
     70  f075					      REPEND
     71  f077		       85 02		      sta	WSYNC
     70  f077					      REPEND
     71  f079		       85 02		      sta	WSYNC
     70  f079					      REPEND
     71  f07b		       85 02		      sta	WSYNC
     70  f07b					      REPEND
     71  f07d		       85 02		      sta	WSYNC
     72  f07f					      REPEND
     73  f07f
     74  f07f		       a9 00		      lda	#0
     75  f081		       85 01		      sta	VBLANK	; turn VBLANK off
     76  f083
     77  f083							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     78  f083							;; Draw the 192 visible scanlines
     79  f083							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f083				   VisibleScanlines
     81  f083
     82  f083							; Draw 10 empty scanlines at the top of the frame
     83  f083					      REPEAT	10
     84  f083		       85 02		      sta	WSYNC
     83  f083					      REPEND
     84  f085		       85 02		      sta	WSYNC
     83  f085					      REPEND
     84  f087		       85 02		      sta	WSYNC
     83  f087					      REPEND
     84  f089		       85 02		      sta	WSYNC
     83  f089					      REPEND
     84  f08b		       85 02		      sta	WSYNC
     83  f08b					      REPEND
     84  f08d		       85 02		      sta	WSYNC
     83  f08d					      REPEND
     84  f08f		       85 02		      sta	WSYNC
     83  f08f					      REPEND
     84  f091		       85 02		      sta	WSYNC
     83  f091					      REPEND
     84  f093		       85 02		      sta	WSYNC
     83  f093					      REPEND
     84  f095		       85 02		      sta	WSYNC
     85  f097					      REPEND
     86  f097
     87  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     88  f097							;; Displays 10 scanlines for the scoreboard number.
     89  f097							;; Pulls data from an array of bytes defined at NumberBitmap.
     90  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     91  f097		       a0 00		      ldy	#0
     92  f099				   ScoreboardLoop
     93  f099		       b9 f2 ff 	      lda	NumberBitmap,Y
     94  f09c		       85 0e		      sta	PF1	; Score in the middle
     95  f09e		       85 02		      sta	WSYNC
     96  f0a0		       c8		      iny
     97  f0a1		       c0 0a		      cpy	#10	; y == 10 (?)
     98  f0a3		       d0 f4		      bne	ScoreboardLoop	; loop if y != 10
     99  f0a5
    100  f0a5		       a9 00		      lda	#0
    101  f0a7		       85 0e		      sta	PF1	; disable playfield
    102  f0a9
    103  f0a9							; Draw 50 empty scanlines between scoreboard and and player
    104  f0a9					      REPEAT	50
    105  f0a9		       85 02		      sta	WSYNC
    104  f0a9					      REPEND
    105  f0ab		       85 02		      sta	WSYNC
    104  f0ab					      REPEND
    105  f0ad		       85 02		      sta	WSYNC
    104  f0ad					      REPEND
    105  f0af		       85 02		      sta	WSYNC
    104  f0af					      REPEND
    105  f0b1		       85 02		      sta	WSYNC
    104  f0b1					      REPEND
    105  f0b3		       85 02		      sta	WSYNC
    104  f0b3					      REPEND
    105  f0b5		       85 02		      sta	WSYNC
    104  f0b5					      REPEND
    105  f0b7		       85 02		      sta	WSYNC
    104  f0b7					      REPEND
    105  f0b9		       85 02		      sta	WSYNC
    104  f0b9					      REPEND
    105  f0bb		       85 02		      sta	WSYNC
    104  f0bb					      REPEND
    105  f0bd		       85 02		      sta	WSYNC
    104  f0bd					      REPEND
    105  f0bf		       85 02		      sta	WSYNC
    104  f0bf					      REPEND
    105  f0c1		       85 02		      sta	WSYNC
    104  f0c1					      REPEND
    105  f0c3		       85 02		      sta	WSYNC
    104  f0c3					      REPEND
    105  f0c5		       85 02		      sta	WSYNC
    104  f0c5					      REPEND
    105  f0c7		       85 02		      sta	WSYNC
    104  f0c7					      REPEND
    105  f0c9		       85 02		      sta	WSYNC
    104  f0c9					      REPEND
    105  f0cb		       85 02		      sta	WSYNC
    104  f0cb					      REPEND
    105  f0cd		       85 02		      sta	WSYNC
    104  f0cd					      REPEND
    105  f0cf		       85 02		      sta	WSYNC
    104  f0cf					      REPEND
    105  f0d1		       85 02		      sta	WSYNC
    104  f0d1					      REPEND
    105  f0d3		       85 02		      sta	WSYNC
    104  f0d3					      REPEND
    105  f0d5		       85 02		      sta	WSYNC
    104  f0d5					      REPEND
    105  f0d7		       85 02		      sta	WSYNC
    104  f0d7					      REPEND
    105  f0d9		       85 02		      sta	WSYNC
    104  f0d9					      REPEND
    105  f0db		       85 02		      sta	WSYNC
    104  f0db					      REPEND
    105  f0dd		       85 02		      sta	WSYNC
    104  f0dd					      REPEND
    105  f0df		       85 02		      sta	WSYNC
    104  f0df					      REPEND
    105  f0e1		       85 02		      sta	WSYNC
    104  f0e1					      REPEND
    105  f0e3		       85 02		      sta	WSYNC
    104  f0e3					      REPEND
    105  f0e5		       85 02		      sta	WSYNC
    104  f0e5					      REPEND
    105  f0e7		       85 02		      sta	WSYNC
    104  f0e7					      REPEND
    105  f0e9		       85 02		      sta	WSYNC
    104  f0e9					      REPEND
    105  f0eb		       85 02		      sta	WSYNC
    104  f0eb					      REPEND
    105  f0ed		       85 02		      sta	WSYNC
    104  f0ed					      REPEND
    105  f0ef		       85 02		      sta	WSYNC
    104  f0ef					      REPEND
    105  f0f1		       85 02		      sta	WSYNC
    104  f0f1					      REPEND
    105  f0f3		       85 02		      sta	WSYNC
    104  f0f3					      REPEND
    105  f0f5		       85 02		      sta	WSYNC
    104  f0f5					      REPEND
    105  f0f7		       85 02		      sta	WSYNC
    104  f0f7					      REPEND
    105  f0f9		       85 02		      sta	WSYNC
    104  f0f9					      REPEND
    105  f0fb		       85 02		      sta	WSYNC
    104  f0fb					      REPEND
    105  f0fd		       85 02		      sta	WSYNC
    104  f0fd					      REPEND
    105  f0ff		       85 02		      sta	WSYNC
    104  f0ff					      REPEND
    105  f101		       85 02		      sta	WSYNC
    104  f101					      REPEND
    105  f103		       85 02		      sta	WSYNC
    104  f103					      REPEND
    105  f105		       85 02		      sta	WSYNC
    104  f105					      REPEND
    105  f107		       85 02		      sta	WSYNC
    104  f107					      REPEND
    105  f109		       85 02		      sta	WSYNC
    104  f109					      REPEND
    105  f10b		       85 02		      sta	WSYNC
    106  f10d					      REPEND
    107  f10d
    108  f10d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    109  f10d							;; Displays 10 scanlines for the Player 0 graphics.
    110  f10d							;; Pulls data from an array of bytes defined at PlayerBitmap.
    111  f10d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    112  f10d		       a0 00		      ldy	#0
    113  f10f				   Player0Loop
    114  f10f		       b9 e8 ff 	      lda	PlayerBitmap,Y
    115  f112		       85 1b		      sta	GRP0
    116  f114		       85 02		      sta	WSYNC
    117  f116		       c8		      iny
    118  f117		       c4 80		      cpy	P0Height
    119  f119		       d0 f4		      bne	Player0Loop
    120  f11b
    121  f11b		       a9 00		      lda	#0
    122  f11d		       85 1b		      sta	GRP0	; disable player 0 graphics
    123  f11f
    124  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    125  f11f							;; Displays 10 scanlines for the player 1 graphics.
    126  f11f							;; Pulls data from an array of bytes defined at PlayerBitmap.
    127  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    128  f11f		       a0 00		      ldy	#0
    129  f121				   Player1Loop
    130  f121		       b9 e8 ff 	      lda	PlayerBitmap,Y
    131  f124		       85 1c		      sta	GRP1
    132  f126		       85 02		      sta	WSYNC
    133  f128		       c8		      iny
    134  f129		       c4 81		      cpy	P1Height
    135  f12b		       d0 f4		      bne	Player1Loop
    136  f12d
    137  f12d		       a9 00		      lda	#0
    138  f12f		       85 1c		      sta	GRP1	; disable player 1 graphics
    139  f131
    140  f131							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    141  f131							;; Draw the remaining 102 scanlines (192-90), since we already
    142  f131							;; used 10+10+50+10+10=80 scanlines in the current frame.
    143  f131							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    144  f131					      REPEAT	102
    145  f131		       85 02		      sta	WSYNC
    144  f131					      REPEND
    145  f133		       85 02		      sta	WSYNC
    144  f133					      REPEND
    145  f135		       85 02		      sta	WSYNC
    144  f135					      REPEND
    145  f137		       85 02		      sta	WSYNC
    144  f137					      REPEND
    145  f139		       85 02		      sta	WSYNC
    144  f139					      REPEND
    145  f13b		       85 02		      sta	WSYNC
    144  f13b					      REPEND
    145  f13d		       85 02		      sta	WSYNC
    144  f13d					      REPEND
    145  f13f		       85 02		      sta	WSYNC
    144  f13f					      REPEND
    145  f141		       85 02		      sta	WSYNC
    144  f141					      REPEND
    145  f143		       85 02		      sta	WSYNC
    144  f143					      REPEND
    145  f145		       85 02		      sta	WSYNC
    144  f145					      REPEND
    145  f147		       85 02		      sta	WSYNC
    144  f147					      REPEND
    145  f149		       85 02		      sta	WSYNC
    144  f149					      REPEND
    145  f14b		       85 02		      sta	WSYNC
    144  f14b					      REPEND
    145  f14d		       85 02		      sta	WSYNC
    144  f14d					      REPEND
    145  f14f		       85 02		      sta	WSYNC
    144  f14f					      REPEND
    145  f151		       85 02		      sta	WSYNC
    144  f151					      REPEND
    145  f153		       85 02		      sta	WSYNC
    144  f153					      REPEND
    145  f155		       85 02		      sta	WSYNC
    144  f155					      REPEND
    145  f157		       85 02		      sta	WSYNC
    144  f157					      REPEND
    145  f159		       85 02		      sta	WSYNC
    144  f159					      REPEND
    145  f15b		       85 02		      sta	WSYNC
    144  f15b					      REPEND
    145  f15d		       85 02		      sta	WSYNC
    144  f15d					      REPEND
    145  f15f		       85 02		      sta	WSYNC
    144  f15f					      REPEND
    145  f161		       85 02		      sta	WSYNC
    144  f161					      REPEND
    145  f163		       85 02		      sta	WSYNC
    144  f163					      REPEND
    145  f165		       85 02		      sta	WSYNC
    144  f165					      REPEND
    145  f167		       85 02		      sta	WSYNC
    144  f167					      REPEND
    145  f169		       85 02		      sta	WSYNC
    144  f169					      REPEND
    145  f16b		       85 02		      sta	WSYNC
    144  f16b					      REPEND
    145  f16d		       85 02		      sta	WSYNC
    144  f16d					      REPEND
    145  f16f		       85 02		      sta	WSYNC
    144  f16f					      REPEND
    145  f171		       85 02		      sta	WSYNC
    144  f171					      REPEND
    145  f173		       85 02		      sta	WSYNC
    144  f173					      REPEND
    145  f175		       85 02		      sta	WSYNC
    144  f175					      REPEND
    145  f177		       85 02		      sta	WSYNC
    144  f177					      REPEND
    145  f179		       85 02		      sta	WSYNC
    144  f179					      REPEND
    145  f17b		       85 02		      sta	WSYNC
    144  f17b					      REPEND
    145  f17d		       85 02		      sta	WSYNC
    144  f17d					      REPEND
    145  f17f		       85 02		      sta	WSYNC
    144  f17f					      REPEND
    145  f181		       85 02		      sta	WSYNC
    144  f181					      REPEND
    145  f183		       85 02		      sta	WSYNC
    144  f183					      REPEND
    145  f185		       85 02		      sta	WSYNC
    144  f185					      REPEND
    145  f187		       85 02		      sta	WSYNC
    144  f187					      REPEND
    145  f189		       85 02		      sta	WSYNC
    144  f189					      REPEND
    145  f18b		       85 02		      sta	WSYNC
    144  f18b					      REPEND
    145  f18d		       85 02		      sta	WSYNC
    144  f18d					      REPEND
    145  f18f		       85 02		      sta	WSYNC
    144  f18f					      REPEND
    145  f191		       85 02		      sta	WSYNC
    144  f191					      REPEND
    145  f193		       85 02		      sta	WSYNC
    144  f193					      REPEND
    145  f195		       85 02		      sta	WSYNC
    144  f195					      REPEND
    145  f197		       85 02		      sta	WSYNC
    144  f197					      REPEND
    145  f199		       85 02		      sta	WSYNC
    144  f199					      REPEND
    145  f19b		       85 02		      sta	WSYNC
    144  f19b					      REPEND
    145  f19d		       85 02		      sta	WSYNC
    144  f19d					      REPEND
    145  f19f		       85 02		      sta	WSYNC
    144  f19f					      REPEND
    145  f1a1		       85 02		      sta	WSYNC
    144  f1a1					      REPEND
    145  f1a3		       85 02		      sta	WSYNC
    144  f1a3					      REPEND
    145  f1a5		       85 02		      sta	WSYNC
    144  f1a5					      REPEND
    145  f1a7		       85 02		      sta	WSYNC
    144  f1a7					      REPEND
    145  f1a9		       85 02		      sta	WSYNC
    144  f1a9					      REPEND
    145  f1ab		       85 02		      sta	WSYNC
    144  f1ab					      REPEND
    145  f1ad		       85 02		      sta	WSYNC
    144  f1ad					      REPEND
    145  f1af		       85 02		      sta	WSYNC
    144  f1af					      REPEND
    145  f1b1		       85 02		      sta	WSYNC
    144  f1b1					      REPEND
    145  f1b3		       85 02		      sta	WSYNC
    144  f1b3					      REPEND
    145  f1b5		       85 02		      sta	WSYNC
    144  f1b5					      REPEND
    145  f1b7		       85 02		      sta	WSYNC
    144  f1b7					      REPEND
    145  f1b9		       85 02		      sta	WSYNC
    144  f1b9					      REPEND
    145  f1bb		       85 02		      sta	WSYNC
    144  f1bb					      REPEND
    145  f1bd		       85 02		      sta	WSYNC
    144  f1bd					      REPEND
    145  f1bf		       85 02		      sta	WSYNC
    144  f1bf					      REPEND
    145  f1c1		       85 02		      sta	WSYNC
    144  f1c1					      REPEND
    145  f1c3		       85 02		      sta	WSYNC
    144  f1c3					      REPEND
    145  f1c5		       85 02		      sta	WSYNC
    144  f1c5					      REPEND
    145  f1c7		       85 02		      sta	WSYNC
    144  f1c7					      REPEND
    145  f1c9		       85 02		      sta	WSYNC
    144  f1c9					      REPEND
    145  f1cb		       85 02		      sta	WSYNC
    144  f1cb					      REPEND
    145  f1cd		       85 02		      sta	WSYNC
    144  f1cd					      REPEND
    145  f1cf		       85 02		      sta	WSYNC
    144  f1cf					      REPEND
    145  f1d1		       85 02		      sta	WSYNC
    144  f1d1					      REPEND
    145  f1d3		       85 02		      sta	WSYNC
    144  f1d3					      REPEND
    145  f1d5		       85 02		      sta	WSYNC
    144  f1d5					      REPEND
    145  f1d7		       85 02		      sta	WSYNC
    144  f1d7					      REPEND
    145  f1d9		       85 02		      sta	WSYNC
    144  f1d9					      REPEND
    145  f1db		       85 02		      sta	WSYNC
    144  f1db					      REPEND
    145  f1dd		       85 02		      sta	WSYNC
    144  f1dd					      REPEND
    145  f1df		       85 02		      sta	WSYNC
    144  f1df					      REPEND
    145  f1e1		       85 02		      sta	WSYNC
    144  f1e1					      REPEND
    145  f1e3		       85 02		      sta	WSYNC
    144  f1e3					      REPEND
    145  f1e5		       85 02		      sta	WSYNC
    144  f1e5					      REPEND
    145  f1e7		       85 02		      sta	WSYNC
    144  f1e7					      REPEND
    145  f1e9		       85 02		      sta	WSYNC
    144  f1e9					      REPEND
    145  f1eb		       85 02		      sta	WSYNC
    144  f1eb					      REPEND
    145  f1ed		       85 02		      sta	WSYNC
    144  f1ed					      REPEND
    145  f1ef		       85 02		      sta	WSYNC
    144  f1ef					      REPEND
    145  f1f1		       85 02		      sta	WSYNC
    144  f1f1					      REPEND
    145  f1f3		       85 02		      sta	WSYNC
    144  f1f3					      REPEND
    145  f1f5		       85 02		      sta	WSYNC
    144  f1f5					      REPEND
    145  f1f7		       85 02		      sta	WSYNC
    144  f1f7					      REPEND
    145  f1f9		       85 02		      sta	WSYNC
    144  f1f9					      REPEND
    145  f1fb		       85 02		      sta	WSYNC
    146  f1fd					      REPEND
    147  f1fd
    148  f1fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    149  f1fd							;; Output 30 more VBLANK overscan lines to complete our frame
    150  f1fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    151  f1fd					      REPEAT	30
    152  f1fd		       85 02		      sta	WSYNC
    151  f1fd					      REPEND
    152  f1ff		       85 02		      sta	WSYNC
    151  f1ff					      REPEND
    152  f201		       85 02		      sta	WSYNC
    151  f201					      REPEND
    152  f203		       85 02		      sta	WSYNC
    151  f203					      REPEND
    152  f205		       85 02		      sta	WSYNC
    151  f205					      REPEND
    152  f207		       85 02		      sta	WSYNC
    151  f207					      REPEND
    152  f209		       85 02		      sta	WSYNC
    151  f209					      REPEND
    152  f20b		       85 02		      sta	WSYNC
    151  f20b					      REPEND
    152  f20d		       85 02		      sta	WSYNC
    151  f20d					      REPEND
    152  f20f		       85 02		      sta	WSYNC
    151  f20f					      REPEND
    152  f211		       85 02		      sta	WSYNC
    151  f211					      REPEND
    152  f213		       85 02		      sta	WSYNC
    151  f213					      REPEND
    152  f215		       85 02		      sta	WSYNC
    151  f215					      REPEND
    152  f217		       85 02		      sta	WSYNC
    151  f217					      REPEND
    152  f219		       85 02		      sta	WSYNC
    151  f219					      REPEND
    152  f21b		       85 02		      sta	WSYNC
    151  f21b					      REPEND
    152  f21d		       85 02		      sta	WSYNC
    151  f21d					      REPEND
    152  f21f		       85 02		      sta	WSYNC
    151  f21f					      REPEND
    152  f221		       85 02		      sta	WSYNC
    151  f221					      REPEND
    152  f223		       85 02		      sta	WSYNC
    151  f223					      REPEND
    152  f225		       85 02		      sta	WSYNC
    151  f225					      REPEND
    152  f227		       85 02		      sta	WSYNC
    151  f227					      REPEND
    152  f229		       85 02		      sta	WSYNC
    151  f229					      REPEND
    152  f22b		       85 02		      sta	WSYNC
    151  f22b					      REPEND
    152  f22d		       85 02		      sta	WSYNC
    151  f22d					      REPEND
    152  f22f		       85 02		      sta	WSYNC
    151  f22f					      REPEND
    152  f231		       85 02		      sta	WSYNC
    151  f231					      REPEND
    152  f233		       85 02		      sta	WSYNC
    151  f233					      REPEND
    152  f235		       85 02		      sta	WSYNC
    151  f235					      REPEND
    152  f237		       85 02		      sta	WSYNC
    153  f239					      REPEND
    154  f239
    155  f239							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  f239							;; Loop to next frame
    157  f239							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    158  f239		       4c 25 f0 	      jmp	StartFrame
    159  f23c
    160  f23c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    161  f23c							;; Defines an array of bytes to draw the scoreboard number.
    162  f23c							;; We add these bytes in the last ROM addresses.
    163  f23c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    164  ffe8					      org	$FFE8
    165  ffe8				   PlayerBitmap
    166  ffe8		       7e		      .byte.b	#%01111110	;  ######
    167  ffe9		       ff		      .byte.b	#%11111111	; ########
    168  ffea		       99		      .byte.b	#%10011001	; #  ##  #
    169  ffeb		       ff		      .byte.b	#%11111111	; ########
    170  ffec		       ff		      .byte.b	#%11111111	; ########
    171  ffed		       ff		      .byte.b	#%11111111	; ########
    172  ffee		       bd		      .byte.b	#%10111101	; # #### #
    173  ffef		       c3		      .byte.b	#%11000011	; ##	 ##
    174  fff0		       ff		      .byte.b	#%11111111	; ########
    175  fff1		       7e		      .byte.b	#%01111110	;  ######
    176  fff2
    177  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    178  fff2							;; Defines an array of bytes to draw the scoreboard number.
    179  fff2							;; We add these bytes in the final ROM addresses.
    180  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    181  fff2					      org	$FFF2
    182  fff2				   NumberBitmap
    183  fff2		       0e		      .byte.b	#%00001110	; ########
    184  fff3		       0e		      .byte.b	#%00001110	; ########
    185  fff4		       02		      .byte.b	#%00000010	;	###
    186  fff5		       02		      .byte.b	#%00000010	;	###
    187  fff6		       0e		      .byte.b	#%00001110	; ########
    188  fff7		       0e		      .byte.b	#%00001110	; ########
    189  fff8		       08		      .byte.b	#%00001000	; ###
    190  fff9		       08		      .byte.b	#%00001000	; ###
    191  fffa		       0e		      .byte.b	#%00001110	; ########
    192  fffb		       0e		      .byte.b	#%00001110	; ########
    193  fffc
    194  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    195  fffc							;; Complete ROM size
    196  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    197  fffc					      org	$FFFC
    198  fffc		       00 f0		      .word.w	Reset
    199  fffe		       00 f0		      .word.w	Reset
