------- FILE playfield.asm LEVEL 1 PASS 1
      1  0000					      processor	6502
      2  0000 ????
      3  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  0000 ????						;; Include required files with definitions and macros
      5  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	"vcs.h"
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.05, 13/November/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_VCS =	105
      5  0000 ????
      6  0000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines hardware registers and memory mapping for the
     11  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  0000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  0000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  0000 ????						; with your views.  Please contribute, if you think you can improve this
     19  0000 ????						; file!
     20  0000 ????						;
     21  0000 ????						; Latest Revisions...
     22  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  0000 ????						;			    This will allow conditional code to verify VCS.H being
     25  0000 ????						;			    used for code assembly.
     26  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  0000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  0000 ????						;			 readability issue, and binary compatibility with disassembled
     30  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  0000 ????						;			 which was broken by the use of segments in this file, as
     33  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  0000 ????						;						   it is safe to leave it undefined, and the base address will
     38  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  0000 ????						;			  - register definitions are now generated through assignment
     41  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  0000 ????						;			    address architecture.
     43  0000 ????						; 1.0	22/MAR/2003		Initial release
     44  0000 ????
     45  0000 ????
     46  0000 ????						;-------------------------------------------------------------------------------
     47  0000 ????
     48  0000 ????						; TIA_BASE_ADDRESS
     49  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  0000 ????						; Normally 0, the base address should (externally, before including this file)
     51  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  0000 ????						; < $40 as a bankswitch.
     54  0000 ????
     55  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     56  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     57  0000 ????				      ENDIF
     58  0000 ????
     59  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  0000 ????						; *OR* by declaring the label before including this file, eg:
     62  0000 ????						; TIA_BASE_ADDRESS = $40
     63  0000 ????						;   include "vcs.h"
     64  0000 ????
     65  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  0000 ????						; for the mirrored ROM hardware registers.
     68  0000 ????
     69  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  0000 ????
     73  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     74  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  0000 ????				      ENDIF
     76  0000 ????
     77  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  0000 ????				      ENDIF
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????
     83 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0000 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE playfield.asm
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE playfield.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Start our ROM code
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12  0000 ????				      seg
     13  f000					      org	$f000
     14  f000
     15  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     17  f00b
     18  f00b		       a2 80		      ldx	#$80	; blue background color
     19  f00d		       86 09		      stx	COLUBK
     20  f00f
     21  f00f		       a9 1c		      lda	#$1C	; yellow playfield color
     22  f011		       85 08		      sta	COLUPF
     23  f013
     24  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f013							;; Start a new frame by configuring VBLANK and VSYNC
     26  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     27  f013				   StartFrame
     28  f013		       a9 02		      lda	#02
     29  f015		       85 01		      sta	VBLANK	; turn VBLANK on
     30  f017		       85 00		      sta	VSYNC	; turn VSYNC on
     31  f019
     32  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  f019							;; Generate the three lines of VSYNC
     34  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f019					      REPEAT	3
     36  f019		       85 02		      sta	WSYNC	; three VSYNC scanlines
     35  f019					      REPEND
     36  f01b		       85 02		      sta	WSYNC	; three VSYNC scanlines
     35  f01b					      REPEND
     36  f01d		       85 02		      sta	WSYNC	; three VSYNC scanlines
     37  f01f					      REPEND
     38  f01f
     39  f01f		       a9 00		      lda	#0
     40  f021		       85 00		      sta	VSYNC	; turn VSYNC off
     41  f023
     42  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43  f023							;; Let the TIA output the 37 recommended lines of VBLANK
     44  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  f023					      REPEAT	37
     46  f023		       85 02		      sta	WSYNC
     45  f023					      REPEND
     46  f025		       85 02		      sta	WSYNC
     45  f025					      REPEND
     46  f027		       85 02		      sta	WSYNC
     45  f027					      REPEND
     46  f029		       85 02		      sta	WSYNC
     45  f029					      REPEND
     46  f02b		       85 02		      sta	WSYNC
     45  f02b					      REPEND
     46  f02d		       85 02		      sta	WSYNC
     45  f02d					      REPEND
     46  f02f		       85 02		      sta	WSYNC
     45  f02f					      REPEND
     46  f031		       85 02		      sta	WSYNC
     45  f031					      REPEND
     46  f033		       85 02		      sta	WSYNC
     45  f033					      REPEND
     46  f035		       85 02		      sta	WSYNC
     45  f035					      REPEND
     46  f037		       85 02		      sta	WSYNC
     45  f037					      REPEND
     46  f039		       85 02		      sta	WSYNC
     45  f039					      REPEND
     46  f03b		       85 02		      sta	WSYNC
     45  f03b					      REPEND
     46  f03d		       85 02		      sta	WSYNC
     45  f03d					      REPEND
     46  f03f		       85 02		      sta	WSYNC
     45  f03f					      REPEND
     46  f041		       85 02		      sta	WSYNC
     45  f041					      REPEND
     46  f043		       85 02		      sta	WSYNC
     45  f043					      REPEND
     46  f045		       85 02		      sta	WSYNC
     45  f045					      REPEND
     46  f047		       85 02		      sta	WSYNC
     45  f047					      REPEND
     46  f049		       85 02		      sta	WSYNC
     45  f049					      REPEND
     46  f04b		       85 02		      sta	WSYNC
     45  f04b					      REPEND
     46  f04d		       85 02		      sta	WSYNC
     45  f04d					      REPEND
     46  f04f		       85 02		      sta	WSYNC
     45  f04f					      REPEND
     46  f051		       85 02		      sta	WSYNC
     45  f051					      REPEND
     46  f053		       85 02		      sta	WSYNC
     45  f053					      REPEND
     46  f055		       85 02		      sta	WSYNC
     45  f055					      REPEND
     46  f057		       85 02		      sta	WSYNC
     45  f057					      REPEND
     46  f059		       85 02		      sta	WSYNC
     45  f059					      REPEND
     46  f05b		       85 02		      sta	WSYNC
     45  f05b					      REPEND
     46  f05d		       85 02		      sta	WSYNC
     45  f05d					      REPEND
     46  f05f		       85 02		      sta	WSYNC
     45  f05f					      REPEND
     46  f061		       85 02		      sta	WSYNC
     45  f061					      REPEND
     46  f063		       85 02		      sta	WSYNC
     45  f063					      REPEND
     46  f065		       85 02		      sta	WSYNC
     45  f065					      REPEND
     46  f067		       85 02		      sta	WSYNC
     45  f067					      REPEND
     46  f069		       85 02		      sta	WSYNC
     45  f069					      REPEND
     46  f06b		       85 02		      sta	WSYNC
     47  f06d					      REPEND
     48  f06d
     49  f06d		       a9 00		      lda	#0
     50  f06f		       85 01		      sta	VBLANK	; turn VBLANK off
     51  f071
     52  f071							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     53  f071							;; Set the CTRLPF register to allow playfield reflect
     54  f071							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     55  f071		       a2 01		      ldx	#%00000001	; CTRLPF register (D0 is the reflect flag)
     56  f073		       86 0a		      stx	CTRLPF
     57  f075
     58  f075							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     59  f075							;; Draw the 192 visible scanlines
     60  f075							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     61  f075
     62  f075							; Skip 7 scanlines with no PF set
     63  f075		       a2 00		      ldx	#0
     64  f077		       86 0d		      stx	PF0
     65  f079		       86 0e		      stx	PF1
     66  f07b		       86 0f		      stx	PF2
     67  f07d					      REPEAT	7
     68  f07d		       85 02		      sta	WSYNC
     67  f07d					      REPEND
     68  f07f		       85 02		      sta	WSYNC
     67  f07f					      REPEND
     68  f081		       85 02		      sta	WSYNC
     67  f081					      REPEND
     68  f083		       85 02		      sta	WSYNC
     67  f083					      REPEND
     68  f085		       85 02		      sta	WSYNC
     67  f085					      REPEND
     68  f087		       85 02		      sta	WSYNC
     67  f087					      REPEND
     68  f089		       85 02		      sta	WSYNC
     69  f08b					      REPEND
     70  f08b
     71  f08b							; Set the PF0 to 1110 (LSB first) and PF1-PF2 as 1111 1111
     72  f08b		       a2 e0		      ldx	#%11100000
     73  f08d		       86 0d		      stx	PF0
     74  f08f		       a2 ff		      ldx	#%11111111
     75  f091		       86 0e		      stx	PF1
     76  f093		       86 0f		      stx	PF2
     77  f095					      REPEAT	7
     78  f095		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     77  f095					      REPEND
     78  f097		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     77  f097					      REPEND
     78  f099		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     77  f099					      REPEND
     78  f09b		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     77  f09b					      REPEND
     78  f09d		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     77  f09d					      REPEND
     78  f09f		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     77  f09f					      REPEND
     78  f0a1		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     79  f0a3					      REPEND
     80  f0a3
     81  f0a3							; Set the next 164 lines only with PF0 third bit enabled
     82  f0a3		       a2 20		      ldx	#%00100000
     83  f0a5		       86 0d		      stx	PF0
     84  f0a7		       a2 00		      ldx	#0
     85  f0a9		       86 0e		      stx	PF1
     86  f0ab		       86 0f		      stx	PF2
     87  f0ad					      REPEAT	164
     88  f0ad		       85 02		      sta	WSYNC
     87  f0ad					      REPEND
     88  f0af		       85 02		      sta	WSYNC
     87  f0af					      REPEND
     88  f0b1		       85 02		      sta	WSYNC
     87  f0b1					      REPEND
     88  f0b3		       85 02		      sta	WSYNC
     87  f0b3					      REPEND
     88  f0b5		       85 02		      sta	WSYNC
     87  f0b5					      REPEND
     88  f0b7		       85 02		      sta	WSYNC
     87  f0b7					      REPEND
     88  f0b9		       85 02		      sta	WSYNC
     87  f0b9					      REPEND
     88  f0bb		       85 02		      sta	WSYNC
     87  f0bb					      REPEND
     88  f0bd		       85 02		      sta	WSYNC
     87  f0bd					      REPEND
     88  f0bf		       85 02		      sta	WSYNC
     87  f0bf					      REPEND
     88  f0c1		       85 02		      sta	WSYNC
     87  f0c1					      REPEND
     88  f0c3		       85 02		      sta	WSYNC
     87  f0c3					      REPEND
     88  f0c5		       85 02		      sta	WSYNC
     87  f0c5					      REPEND
     88  f0c7		       85 02		      sta	WSYNC
     87  f0c7					      REPEND
     88  f0c9		       85 02		      sta	WSYNC
     87  f0c9					      REPEND
     88  f0cb		       85 02		      sta	WSYNC
     87  f0cb					      REPEND
     88  f0cd		       85 02		      sta	WSYNC
     87  f0cd					      REPEND
     88  f0cf		       85 02		      sta	WSYNC
     87  f0cf					      REPEND
     88  f0d1		       85 02		      sta	WSYNC
     87  f0d1					      REPEND
     88  f0d3		       85 02		      sta	WSYNC
     87  f0d3					      REPEND
     88  f0d5		       85 02		      sta	WSYNC
     87  f0d5					      REPEND
     88  f0d7		       85 02		      sta	WSYNC
     87  f0d7					      REPEND
     88  f0d9		       85 02		      sta	WSYNC
     87  f0d9					      REPEND
     88  f0db		       85 02		      sta	WSYNC
     87  f0db					      REPEND
     88  f0dd		       85 02		      sta	WSYNC
     87  f0dd					      REPEND
     88  f0df		       85 02		      sta	WSYNC
     87  f0df					      REPEND
     88  f0e1		       85 02		      sta	WSYNC
     87  f0e1					      REPEND
     88  f0e3		       85 02		      sta	WSYNC
     87  f0e3					      REPEND
     88  f0e5		       85 02		      sta	WSYNC
     87  f0e5					      REPEND
     88  f0e7		       85 02		      sta	WSYNC
     87  f0e7					      REPEND
     88  f0e9		       85 02		      sta	WSYNC
     87  f0e9					      REPEND
     88  f0eb		       85 02		      sta	WSYNC
     87  f0eb					      REPEND
     88  f0ed		       85 02		      sta	WSYNC
     87  f0ed					      REPEND
     88  f0ef		       85 02		      sta	WSYNC
     87  f0ef					      REPEND
     88  f0f1		       85 02		      sta	WSYNC
     87  f0f1					      REPEND
     88  f0f3		       85 02		      sta	WSYNC
     87  f0f3					      REPEND
     88  f0f5		       85 02		      sta	WSYNC
     87  f0f5					      REPEND
     88  f0f7		       85 02		      sta	WSYNC
     87  f0f7					      REPEND
     88  f0f9		       85 02		      sta	WSYNC
     87  f0f9					      REPEND
     88  f0fb		       85 02		      sta	WSYNC
     87  f0fb					      REPEND
     88  f0fd		       85 02		      sta	WSYNC
     87  f0fd					      REPEND
     88  f0ff		       85 02		      sta	WSYNC
     87  f0ff					      REPEND
     88  f101		       85 02		      sta	WSYNC
     87  f101					      REPEND
     88  f103		       85 02		      sta	WSYNC
     87  f103					      REPEND
     88  f105		       85 02		      sta	WSYNC
     87  f105					      REPEND
     88  f107		       85 02		      sta	WSYNC
     87  f107					      REPEND
     88  f109		       85 02		      sta	WSYNC
     87  f109					      REPEND
     88  f10b		       85 02		      sta	WSYNC
     87  f10b					      REPEND
     88  f10d		       85 02		      sta	WSYNC
     87  f10d					      REPEND
     88  f10f		       85 02		      sta	WSYNC
     87  f10f					      REPEND
     88  f111		       85 02		      sta	WSYNC
     87  f111					      REPEND
     88  f113		       85 02		      sta	WSYNC
     87  f113					      REPEND
     88  f115		       85 02		      sta	WSYNC
     87  f115					      REPEND
     88  f117		       85 02		      sta	WSYNC
     87  f117					      REPEND
     88  f119		       85 02		      sta	WSYNC
     87  f119					      REPEND
     88  f11b		       85 02		      sta	WSYNC
     87  f11b					      REPEND
     88  f11d		       85 02		      sta	WSYNC
     87  f11d					      REPEND
     88  f11f		       85 02		      sta	WSYNC
     87  f11f					      REPEND
     88  f121		       85 02		      sta	WSYNC
     87  f121					      REPEND
     88  f123		       85 02		      sta	WSYNC
     87  f123					      REPEND
     88  f125		       85 02		      sta	WSYNC
     87  f125					      REPEND
     88  f127		       85 02		      sta	WSYNC
     87  f127					      REPEND
     88  f129		       85 02		      sta	WSYNC
     87  f129					      REPEND
     88  f12b		       85 02		      sta	WSYNC
     87  f12b					      REPEND
     88  f12d		       85 02		      sta	WSYNC
     87  f12d					      REPEND
     88  f12f		       85 02		      sta	WSYNC
     87  f12f					      REPEND
     88  f131		       85 02		      sta	WSYNC
     87  f131					      REPEND
     88  f133		       85 02		      sta	WSYNC
     87  f133					      REPEND
     88  f135		       85 02		      sta	WSYNC
     87  f135					      REPEND
     88  f137		       85 02		      sta	WSYNC
     87  f137					      REPEND
     88  f139		       85 02		      sta	WSYNC
     87  f139					      REPEND
     88  f13b		       85 02		      sta	WSYNC
     87  f13b					      REPEND
     88  f13d		       85 02		      sta	WSYNC
     87  f13d					      REPEND
     88  f13f		       85 02		      sta	WSYNC
     87  f13f					      REPEND
     88  f141		       85 02		      sta	WSYNC
     87  f141					      REPEND
     88  f143		       85 02		      sta	WSYNC
     87  f143					      REPEND
     88  f145		       85 02		      sta	WSYNC
     87  f145					      REPEND
     88  f147		       85 02		      sta	WSYNC
     87  f147					      REPEND
     88  f149		       85 02		      sta	WSYNC
     87  f149					      REPEND
     88  f14b		       85 02		      sta	WSYNC
     87  f14b					      REPEND
     88  f14d		       85 02		      sta	WSYNC
     87  f14d					      REPEND
     88  f14f		       85 02		      sta	WSYNC
     87  f14f					      REPEND
     88  f151		       85 02		      sta	WSYNC
     87  f151					      REPEND
     88  f153		       85 02		      sta	WSYNC
     87  f153					      REPEND
     88  f155		       85 02		      sta	WSYNC
     87  f155					      REPEND
     88  f157		       85 02		      sta	WSYNC
     87  f157					      REPEND
     88  f159		       85 02		      sta	WSYNC
     87  f159					      REPEND
     88  f15b		       85 02		      sta	WSYNC
     87  f15b					      REPEND
     88  f15d		       85 02		      sta	WSYNC
     87  f15d					      REPEND
     88  f15f		       85 02		      sta	WSYNC
     87  f15f					      REPEND
     88  f161		       85 02		      sta	WSYNC
     87  f161					      REPEND
     88  f163		       85 02		      sta	WSYNC
     87  f163					      REPEND
     88  f165		       85 02		      sta	WSYNC
     87  f165					      REPEND
     88  f167		       85 02		      sta	WSYNC
     87  f167					      REPEND
     88  f169		       85 02		      sta	WSYNC
     87  f169					      REPEND
     88  f16b		       85 02		      sta	WSYNC
     87  f16b					      REPEND
     88  f16d		       85 02		      sta	WSYNC
     87  f16d					      REPEND
     88  f16f		       85 02		      sta	WSYNC
     87  f16f					      REPEND
     88  f171		       85 02		      sta	WSYNC
     87  f171					      REPEND
     88  f173		       85 02		      sta	WSYNC
     87  f173					      REPEND
     88  f175		       85 02		      sta	WSYNC
     87  f175					      REPEND
     88  f177		       85 02		      sta	WSYNC
     87  f177					      REPEND
     88  f179		       85 02		      sta	WSYNC
     87  f179					      REPEND
     88  f17b		       85 02		      sta	WSYNC
     87  f17b					      REPEND
     88  f17d		       85 02		      sta	WSYNC
     87  f17d					      REPEND
     88  f17f		       85 02		      sta	WSYNC
     87  f17f					      REPEND
     88  f181		       85 02		      sta	WSYNC
     87  f181					      REPEND
     88  f183		       85 02		      sta	WSYNC
     87  f183					      REPEND
     88  f185		       85 02		      sta	WSYNC
     87  f185					      REPEND
     88  f187		       85 02		      sta	WSYNC
     87  f187					      REPEND
     88  f189		       85 02		      sta	WSYNC
     87  f189					      REPEND
     88  f18b		       85 02		      sta	WSYNC
     87  f18b					      REPEND
     88  f18d		       85 02		      sta	WSYNC
     87  f18d					      REPEND
     88  f18f		       85 02		      sta	WSYNC
     87  f18f					      REPEND
     88  f191		       85 02		      sta	WSYNC
     87  f191					      REPEND
     88  f193		       85 02		      sta	WSYNC
     87  f193					      REPEND
     88  f195		       85 02		      sta	WSYNC
     87  f195					      REPEND
     88  f197		       85 02		      sta	WSYNC
     87  f197					      REPEND
     88  f199		       85 02		      sta	WSYNC
     87  f199					      REPEND
     88  f19b		       85 02		      sta	WSYNC
     87  f19b					      REPEND
     88  f19d		       85 02		      sta	WSYNC
     87  f19d					      REPEND
     88  f19f		       85 02		      sta	WSYNC
     87  f19f					      REPEND
     88  f1a1		       85 02		      sta	WSYNC
     87  f1a1					      REPEND
     88  f1a3		       85 02		      sta	WSYNC
     87  f1a3					      REPEND
     88  f1a5		       85 02		      sta	WSYNC
     87  f1a5					      REPEND
     88  f1a7		       85 02		      sta	WSYNC
     87  f1a7					      REPEND
     88  f1a9		       85 02		      sta	WSYNC
     87  f1a9					      REPEND
     88  f1ab		       85 02		      sta	WSYNC
     87  f1ab					      REPEND
     88  f1ad		       85 02		      sta	WSYNC
     87  f1ad					      REPEND
     88  f1af		       85 02		      sta	WSYNC
     87  f1af					      REPEND
     88  f1b1		       85 02		      sta	WSYNC
     87  f1b1					      REPEND
     88  f1b3		       85 02		      sta	WSYNC
     87  f1b3					      REPEND
     88  f1b5		       85 02		      sta	WSYNC
     87  f1b5					      REPEND
     88  f1b7		       85 02		      sta	WSYNC
     87  f1b7					      REPEND
     88  f1b9		       85 02		      sta	WSYNC
     87  f1b9					      REPEND
     88  f1bb		       85 02		      sta	WSYNC
     87  f1bb					      REPEND
     88  f1bd		       85 02		      sta	WSYNC
     87  f1bd					      REPEND
     88  f1bf		       85 02		      sta	WSYNC
     87  f1bf					      REPEND
     88  f1c1		       85 02		      sta	WSYNC
     87  f1c1					      REPEND
     88  f1c3		       85 02		      sta	WSYNC
     87  f1c3					      REPEND
     88  f1c5		       85 02		      sta	WSYNC
     87  f1c5					      REPEND
     88  f1c7		       85 02		      sta	WSYNC
     87  f1c7					      REPEND
     88  f1c9		       85 02		      sta	WSYNC
     87  f1c9					      REPEND
     88  f1cb		       85 02		      sta	WSYNC
     87  f1cb					      REPEND
     88  f1cd		       85 02		      sta	WSYNC
     87  f1cd					      REPEND
     88  f1cf		       85 02		      sta	WSYNC
     87  f1cf					      REPEND
     88  f1d1		       85 02		      sta	WSYNC
     87  f1d1					      REPEND
     88  f1d3		       85 02		      sta	WSYNC
     87  f1d3					      REPEND
     88  f1d5		       85 02		      sta	WSYNC
     87  f1d5					      REPEND
     88  f1d7		       85 02		      sta	WSYNC
     87  f1d7					      REPEND
     88  f1d9		       85 02		      sta	WSYNC
     87  f1d9					      REPEND
     88  f1db		       85 02		      sta	WSYNC
     87  f1db					      REPEND
     88  f1dd		       85 02		      sta	WSYNC
     87  f1dd					      REPEND
     88  f1df		       85 02		      sta	WSYNC
     87  f1df					      REPEND
     88  f1e1		       85 02		      sta	WSYNC
     87  f1e1					      REPEND
     88  f1e3		       85 02		      sta	WSYNC
     87  f1e3					      REPEND
     88  f1e5		       85 02		      sta	WSYNC
     87  f1e5					      REPEND
     88  f1e7		       85 02		      sta	WSYNC
     87  f1e7					      REPEND
     88  f1e9		       85 02		      sta	WSYNC
     87  f1e9					      REPEND
     88  f1eb		       85 02		      sta	WSYNC
     87  f1eb					      REPEND
     88  f1ed		       85 02		      sta	WSYNC
     87  f1ed					      REPEND
     88  f1ef		       85 02		      sta	WSYNC
     87  f1ef					      REPEND
     88  f1f1		       85 02		      sta	WSYNC
     87  f1f1					      REPEND
     88  f1f3		       85 02		      sta	WSYNC
     89  f1f5					      REPEND
     90  f1f5
     91  f1f5							; Set the PF0 to 1110 (LSB first) and PF1-PF2 as 1111 1111
     92  f1f5		       a2 e0		      ldx	#%11100000
     93  f1f7		       86 0d		      stx	PF0
     94  f1f9		       a2 ff		      ldx	#%11111111
     95  f1fb		       86 0e		      stx	PF1
     96  f1fd		       86 0f		      stx	PF2
     97  f1ff					      REPEAT	7
     98  f1ff		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     97  f1ff					      REPEND
     98  f201		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     97  f201					      REPEND
     98  f203		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     97  f203					      REPEND
     98  f205		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     97  f205					      REPEND
     98  f207		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     97  f207					      REPEND
     98  f209		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     97  f209					      REPEND
     98  f20b		       85 02		      sta	WSYNC	; repeat PF config for 7 scanlines
     99  f20d					      REPEND
    100  f20d
    101  f20d							; Skip 7 vertical lines with no PF set
    102  f20d		       a2 00		      ldx	#0
    103  f20f		       86 0d		      stx	PF0
    104  f211		       86 0e		      stx	PF1
    105  f213		       86 0f		      stx	PF2
    106  f215					      REPEAT	7
    107  f215		       85 02		      sta	WSYNC
    106  f215					      REPEND
    107  f217		       85 02		      sta	WSYNC
    106  f217					      REPEND
    107  f219		       85 02		      sta	WSYNC
    106  f219					      REPEND
    107  f21b		       85 02		      sta	WSYNC
    106  f21b					      REPEND
    107  f21d		       85 02		      sta	WSYNC
    106  f21d					      REPEND
    107  f21f		       85 02		      sta	WSYNC
    106  f21f					      REPEND
    107  f221		       85 02		      sta	WSYNC
    108  f223					      REPEND
    109  f223
    110  f223							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    111  f223							;; Output 30 more VBLANK overscan lines to complete our frame
    112  f223							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    113  f223		       a9 02		      lda	#2
    114  f225		       85 01		      sta	VBLANK	; enable VBLANK back again
    115  f227					      REPEAT	30
    116  f227		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f227					      REPEND
    116  f229		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f229					      REPEND
    116  f22b		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f22b					      REPEND
    116  f22d		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f22d					      REPEND
    116  f22f		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f22f					      REPEND
    116  f231		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f231					      REPEND
    116  f233		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f233					      REPEND
    116  f235		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f235					      REPEND
    116  f237		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f237					      REPEND
    116  f239		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f239					      REPEND
    116  f23b		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f23b					      REPEND
    116  f23d		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f23d					      REPEND
    116  f23f		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f23f					      REPEND
    116  f241		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f241					      REPEND
    116  f243		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f243					      REPEND
    116  f245		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f245					      REPEND
    116  f247		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f247					      REPEND
    116  f249		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f249					      REPEND
    116  f24b		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f24b					      REPEND
    116  f24d		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f24d					      REPEND
    116  f24f		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f24f					      REPEND
    116  f251		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f251					      REPEND
    116  f253		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f253					      REPEND
    116  f255		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f255					      REPEND
    116  f257		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f257					      REPEND
    116  f259		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f259					      REPEND
    116  f25b		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f25b					      REPEND
    116  f25d		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f25d					      REPEND
    116  f25f		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    115  f25f					      REPEND
    116  f261		       85 02		      sta	WSYNC	; output the 30 recommended overscan lines
    117  f263					      REPEND
    118  f263
    119  f263		       a9 00		      lda	#0
    120  f265		       85 01		      sta	VBLANK	; turn VBLANK off
    121  f267
    122  f267							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  f267							;; Loop to next frame
    124  f267							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    125  f267		       4c 13 f0 	      jmp	StartFrame
    126  f26a
    127  f26a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    128  f26a							;; Complete ROM size
    129  f26a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    130  fffc					      org	$fffc
    131  fffc		       00 f0		      .word.w	Reset
    132  fffe		       00 f0		      .word.w	Reset
    133  10000
