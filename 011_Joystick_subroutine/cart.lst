------- FILE joystick_in.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with register mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE joystick_in.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE joystick_in.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Start an uninitialized segment at $80 for var declaration.
     11  0000 ????						;; We have memory from $80 to $FF to work with, minus a few at
     12  0000 ????						;; the end if we use the stack.
     13  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     14 U0081 ????				      seg.u	Variables
     15 U0080					      org	$80
     16 U0080		       00	   P0XPos     byte.b		; sprite X coordinate
     17 U0081
     18 U0081							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     19 U0081							;; Start our ROM code segment starting at $F000.
     20 U0081							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     21  10000 ????				       seg	Code
     22  f000					      org	$F000
     23  f000
     24  f000				   Reset
      0  f000					      CLEAN_START		; macro to clean memory and TIA
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     26  f00b
     27  f00b		       a2 80		      ldx	#$80	; blue background color
     28  f00d		       86 09		      stx	COLUBK
     29  f00f
     30  f00f		       a2 d0		      ldx	#$D0	; green playfield floor color
     31  f011		       86 08		      stx	COLUPF
     32  f013
     33  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     34  f013							;; Initialize variables
     35  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     36  f013		       a9 0a		      lda	#10
     37  f015		       85 80		      sta	P0XPos	; initialize player X coordinate
     38  f017
     39  f017							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40  f017							;; Start a new frame by configuring VBLANK and VSYNC
     41  f017							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  f017				   StartFrame
     43  f017
     44  f017							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  f017							;; Calling my subroutine
     46  f017							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     47  f017		       a5 80		      lda	P0XPos
     48  f019		       a0 00		      ldy	#0
     49  f01b		       20 66 f2 	      jsr	SetObjectXPos	; set player0 horizontal position <jump subroutine>
     50  f01e
     51  f01e		       85 02		      sta	WSYNC
     52  f020		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
     53  f022
     54  f022		       a9 02		      lda	#2
     55  f024		       85 01		      sta	VBLANK	; turn VBLANK on
     56  f026		       85 00		      sta	VSYNC	; turn VSYNC on
     57  f028
     58  f028							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     59  f028							;; Display 3 vertical lines of VSYNC
     60  f028							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     61  f028					      REPEAT	3
     62  f028		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     61  f028					      REPEND
     62  f02a		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     61  f02a					      REPEND
     62  f02c		       85 02		      sta	WSYNC	; first three VSYNC scanlines
     63  f02e					      REPEND
     64  f02e		       a9 00		      lda	#0
     65  f030		       85 00		      sta	VSYNC	; turn VSYNC off
     66  f032
     67  f032							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  f032							;; Let the TIA output the remaining 35 lines of VBLANK (37 - 2)
     69  f032							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     70  f032					      REPEAT	35
     71  f032		       85 02		      sta	WSYNC
     70  f032					      REPEND
     71  f034		       85 02		      sta	WSYNC
     70  f034					      REPEND
     71  f036		       85 02		      sta	WSYNC
     70  f036					      REPEND
     71  f038		       85 02		      sta	WSYNC
     70  f038					      REPEND
     71  f03a		       85 02		      sta	WSYNC
     70  f03a					      REPEND
     71  f03c		       85 02		      sta	WSYNC
     70  f03c					      REPEND
     71  f03e		       85 02		      sta	WSYNC
     70  f03e					      REPEND
     71  f040		       85 02		      sta	WSYNC
     70  f040					      REPEND
     71  f042		       85 02		      sta	WSYNC
     70  f042					      REPEND
     71  f044		       85 02		      sta	WSYNC
     70  f044					      REPEND
     71  f046		       85 02		      sta	WSYNC
     70  f046					      REPEND
     71  f048		       85 02		      sta	WSYNC
     70  f048					      REPEND
     71  f04a		       85 02		      sta	WSYNC
     70  f04a					      REPEND
     71  f04c		       85 02		      sta	WSYNC
     70  f04c					      REPEND
     71  f04e		       85 02		      sta	WSYNC
     70  f04e					      REPEND
     71  f050		       85 02		      sta	WSYNC
     70  f050					      REPEND
     71  f052		       85 02		      sta	WSYNC
     70  f052					      REPEND
     71  f054		       85 02		      sta	WSYNC
     70  f054					      REPEND
     71  f056		       85 02		      sta	WSYNC
     70  f056					      REPEND
     71  f058		       85 02		      sta	WSYNC
     70  f058					      REPEND
     71  f05a		       85 02		      sta	WSYNC
     70  f05a					      REPEND
     71  f05c		       85 02		      sta	WSYNC
     70  f05c					      REPEND
     71  f05e		       85 02		      sta	WSYNC
     70  f05e					      REPEND
     71  f060		       85 02		      sta	WSYNC
     70  f060					      REPEND
     71  f062		       85 02		      sta	WSYNC
     70  f062					      REPEND
     71  f064		       85 02		      sta	WSYNC
     70  f064					      REPEND
     71  f066		       85 02		      sta	WSYNC
     70  f066					      REPEND
     71  f068		       85 02		      sta	WSYNC
     70  f068					      REPEND
     71  f06a		       85 02		      sta	WSYNC
     70  f06a					      REPEND
     71  f06c		       85 02		      sta	WSYNC
     70  f06c					      REPEND
     71  f06e		       85 02		      sta	WSYNC
     70  f06e					      REPEND
     71  f070		       85 02		      sta	WSYNC
     70  f070					      REPEND
     71  f072		       85 02		      sta	WSYNC
     70  f072					      REPEND
     71  f074		       85 02		      sta	WSYNC
     70  f074					      REPEND
     71  f076		       85 02		      sta	WSYNC
     72  f078					      REPEND
     73  f078		       a9 00		      lda	#0
     74  f07a		       85 01		      sta	VBLANK	; turn VBLANK off
     75  f07c
     76  f07c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     77  f07c							;; Draw the 192 visible scanlines
     78  f07c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     79  f07c					      REPEAT	160
     80  f07c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f07c					      REPEND
     80  f07e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f07e					      REPEND
     80  f080		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f080					      REPEND
     80  f082		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f082					      REPEND
     80  f084		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f084					      REPEND
     80  f086		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f086					      REPEND
     80  f088		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f088					      REPEND
     80  f08a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f08a					      REPEND
     80  f08c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f08c					      REPEND
     80  f08e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f08e					      REPEND
     80  f090		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f090					      REPEND
     80  f092		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f092					      REPEND
     80  f094		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f094					      REPEND
     80  f096		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f096					      REPEND
     80  f098		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f098					      REPEND
     80  f09a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f09a					      REPEND
     80  f09c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f09c					      REPEND
     80  f09e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f09e					      REPEND
     80  f0a0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0a0					      REPEND
     80  f0a2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0a2					      REPEND
     80  f0a4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0a4					      REPEND
     80  f0a6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0a6					      REPEND
     80  f0a8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0a8					      REPEND
     80  f0aa		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0aa					      REPEND
     80  f0ac		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ac					      REPEND
     80  f0ae		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ae					      REPEND
     80  f0b0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0b0					      REPEND
     80  f0b2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0b2					      REPEND
     80  f0b4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0b4					      REPEND
     80  f0b6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0b6					      REPEND
     80  f0b8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0b8					      REPEND
     80  f0ba		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ba					      REPEND
     80  f0bc		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0bc					      REPEND
     80  f0be		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0be					      REPEND
     80  f0c0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0c0					      REPEND
     80  f0c2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0c2					      REPEND
     80  f0c4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0c4					      REPEND
     80  f0c6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0c6					      REPEND
     80  f0c8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0c8					      REPEND
     80  f0ca		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ca					      REPEND
     80  f0cc		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0cc					      REPEND
     80  f0ce		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ce					      REPEND
     80  f0d0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0d0					      REPEND
     80  f0d2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0d2					      REPEND
     80  f0d4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0d4					      REPEND
     80  f0d6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0d6					      REPEND
     80  f0d8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0d8					      REPEND
     80  f0da		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0da					      REPEND
     80  f0dc		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0dc					      REPEND
     80  f0de		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0de					      REPEND
     80  f0e0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0e0					      REPEND
     80  f0e2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0e2					      REPEND
     80  f0e4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0e4					      REPEND
     80  f0e6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0e6					      REPEND
     80  f0e8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0e8					      REPEND
     80  f0ea		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ea					      REPEND
     80  f0ec		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ec					      REPEND
     80  f0ee		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0ee					      REPEND
     80  f0f0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0f0					      REPEND
     80  f0f2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0f2					      REPEND
     80  f0f4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0f4					      REPEND
     80  f0f6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0f6					      REPEND
     80  f0f8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0f8					      REPEND
     80  f0fa		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0fa					      REPEND
     80  f0fc		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0fc					      REPEND
     80  f0fe		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f0fe					      REPEND
     80  f100		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f100					      REPEND
     80  f102		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f102					      REPEND
     80  f104		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f104					      REPEND
     80  f106		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f106					      REPEND
     80  f108		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f108					      REPEND
     80  f10a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f10a					      REPEND
     80  f10c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f10c					      REPEND
     80  f10e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f10e					      REPEND
     80  f110		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f110					      REPEND
     80  f112		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f112					      REPEND
     80  f114		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f114					      REPEND
     80  f116		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f116					      REPEND
     80  f118		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f118					      REPEND
     80  f11a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f11a					      REPEND
     80  f11c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f11c					      REPEND
     80  f11e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f11e					      REPEND
     80  f120		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f120					      REPEND
     80  f122		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f122					      REPEND
     80  f124		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f124					      REPEND
     80  f126		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f126					      REPEND
     80  f128		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f128					      REPEND
     80  f12a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f12a					      REPEND
     80  f12c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f12c					      REPEND
     80  f12e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f12e					      REPEND
     80  f130		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f130					      REPEND
     80  f132		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f132					      REPEND
     80  f134		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f134					      REPEND
     80  f136		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f136					      REPEND
     80  f138		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f138					      REPEND
     80  f13a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f13a					      REPEND
     80  f13c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f13c					      REPEND
     80  f13e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f13e					      REPEND
     80  f140		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f140					      REPEND
     80  f142		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f142					      REPEND
     80  f144		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f144					      REPEND
     80  f146		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f146					      REPEND
     80  f148		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f148					      REPEND
     80  f14a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f14a					      REPEND
     80  f14c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f14c					      REPEND
     80  f14e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f14e					      REPEND
     80  f150		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f150					      REPEND
     80  f152		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f152					      REPEND
     80  f154		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f154					      REPEND
     80  f156		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f156					      REPEND
     80  f158		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f158					      REPEND
     80  f15a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f15a					      REPEND
     80  f15c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f15c					      REPEND
     80  f15e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f15e					      REPEND
     80  f160		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f160					      REPEND
     80  f162		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f162					      REPEND
     80  f164		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f164					      REPEND
     80  f166		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f166					      REPEND
     80  f168		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f168					      REPEND
     80  f16a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f16a					      REPEND
     80  f16c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f16c					      REPEND
     80  f16e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f16e					      REPEND
     80  f170		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f170					      REPEND
     80  f172		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f172					      REPEND
     80  f174		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f174					      REPEND
     80  f176		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f176					      REPEND
     80  f178		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f178					      REPEND
     80  f17a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f17a					      REPEND
     80  f17c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f17c					      REPEND
     80  f17e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f17e					      REPEND
     80  f180		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f180					      REPEND
     80  f182		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f182					      REPEND
     80  f184		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f184					      REPEND
     80  f186		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f186					      REPEND
     80  f188		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f188					      REPEND
     80  f18a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f18a					      REPEND
     80  f18c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f18c					      REPEND
     80  f18e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f18e					      REPEND
     80  f190		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f190					      REPEND
     80  f192		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f192					      REPEND
     80  f194		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f194					      REPEND
     80  f196		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f196					      REPEND
     80  f198		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f198					      REPEND
     80  f19a		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f19a					      REPEND
     80  f19c		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f19c					      REPEND
     80  f19e		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f19e					      REPEND
     80  f1a0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1a0					      REPEND
     80  f1a2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1a2					      REPEND
     80  f1a4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1a4					      REPEND
     80  f1a6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1a6					      REPEND
     80  f1a8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1a8					      REPEND
     80  f1aa		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1aa					      REPEND
     80  f1ac		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1ac					      REPEND
     80  f1ae		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1ae					      REPEND
     80  f1b0		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1b0					      REPEND
     80  f1b2		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1b2					      REPEND
     80  f1b4		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1b4					      REPEND
     80  f1b6		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1b6					      REPEND
     80  f1b8		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     79  f1b8					      REPEND
     80  f1ba		       85 02		      sta	WSYNC	; wait for 160 empty scanlines
     81  f1bc					      REPEND
     82  f1bc
     83  f1bc		       a0 11		      ldy	#17	; counter to draw 17 rows of player0 bitmap
     84  f1be				   DrawBitmap
     85  f1be		       b9 7a f2 	      lda	P0Bitmap,Y	; load player bitmap slice of data
     86  f1c1		       85 1b		      sta	GRP0	; set graphics for player 0 slice
     87  f1c3
     88  f1c3		       b9 8b f2 	      lda	P0Color,Y	; load player color from lookup table
     89  f1c6		       85 06		      sta	COLUP0	; set color for player 0 slice
     90  f1c8
     91  f1c8		       85 02		      sta	WSYNC	; wait for next scanline
     92  f1ca
     93  f1ca		       88		      dey
     94  f1cb		       d0 f1		      bne	DrawBitmap	; repeat next scanline until finished
     95  f1cd
     96  f1cd		       a9 00		      lda	#0
     97  f1cf		       85 1b		      sta	GRP0	; disable P0 bitmap graphics
     98  f1d1
     99  f1d1		       a9 ff		      lda	#$FF	; enable grass playfield
    100  f1d3		       85 0d		      sta	PF0
    101  f1d5		       85 0e		      sta	PF1
    102  f1d7		       85 0f		      sta	PF2
    103  f1d9
    104  f1d9					      REPEAT	15
    105  f1d9		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1d9					      REPEND
    105  f1db		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1db					      REPEND
    105  f1dd		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1dd					      REPEND
    105  f1df		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1df					      REPEND
    105  f1e1		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1e1					      REPEND
    105  f1e3		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1e3					      REPEND
    105  f1e5		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1e5					      REPEND
    105  f1e7		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1e7					      REPEND
    105  f1e9		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1e9					      REPEND
    105  f1eb		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1eb					      REPEND
    105  f1ed		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1ed					      REPEND
    105  f1ef		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1ef					      REPEND
    105  f1f1		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1f1					      REPEND
    105  f1f3		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    104  f1f3					      REPEND
    105  f1f5		       85 02		      sta	WSYNC	; wait for remaining 15 empty scanlines
    106  f1f7					      REPEND
    107  f1f7
    108  f1f7		       a9 00		      lda	#0	; disable grass playfield
    109  f1f9		       85 0d		      sta	PF0
    110  f1fb		       85 0e		      sta	PF1
    111  f1fd		       85 0f		      sta	PF2
    112  f1ff
    113  f1ff							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f1ff							;; Output 30 more VBLANK overscan lines to complete our frame
    115  f1ff							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    116  f1ff				   Overscan
    117  f1ff		       a9 02		      lda	#2
    118  f201		       85 01		      sta	VBLANK	; turn VBLANK on again for overscan
    119  f203					      REPEAT	30
    120  f203		       85 02		      sta	WSYNC
    119  f203					      REPEND
    120  f205		       85 02		      sta	WSYNC
    119  f205					      REPEND
    120  f207		       85 02		      sta	WSYNC
    119  f207					      REPEND
    120  f209		       85 02		      sta	WSYNC
    119  f209					      REPEND
    120  f20b		       85 02		      sta	WSYNC
    119  f20b					      REPEND
    120  f20d		       85 02		      sta	WSYNC
    119  f20d					      REPEND
    120  f20f		       85 02		      sta	WSYNC
    119  f20f					      REPEND
    120  f211		       85 02		      sta	WSYNC
    119  f211					      REPEND
    120  f213		       85 02		      sta	WSYNC
    119  f213					      REPEND
    120  f215		       85 02		      sta	WSYNC
    119  f215					      REPEND
    120  f217		       85 02		      sta	WSYNC
    119  f217					      REPEND
    120  f219		       85 02		      sta	WSYNC
    119  f219					      REPEND
    120  f21b		       85 02		      sta	WSYNC
    119  f21b					      REPEND
    120  f21d		       85 02		      sta	WSYNC
    119  f21d					      REPEND
    120  f21f		       85 02		      sta	WSYNC
    119  f21f					      REPEND
    120  f221		       85 02		      sta	WSYNC
    119  f221					      REPEND
    120  f223		       85 02		      sta	WSYNC
    119  f223					      REPEND
    120  f225		       85 02		      sta	WSYNC
    119  f225					      REPEND
    120  f227		       85 02		      sta	WSYNC
    119  f227					      REPEND
    120  f229		       85 02		      sta	WSYNC
    119  f229					      REPEND
    120  f22b		       85 02		      sta	WSYNC
    119  f22b					      REPEND
    120  f22d		       85 02		      sta	WSYNC
    119  f22d					      REPEND
    120  f22f		       85 02		      sta	WSYNC
    119  f22f					      REPEND
    120  f231		       85 02		      sta	WSYNC
    119  f231					      REPEND
    120  f233		       85 02		      sta	WSYNC
    119  f233					      REPEND
    120  f235		       85 02		      sta	WSYNC
    119  f235					      REPEND
    120  f237		       85 02		      sta	WSYNC
    119  f237					      REPEND
    120  f239		       85 02		      sta	WSYNC
    119  f239					      REPEND
    120  f23b		       85 02		      sta	WSYNC
    119  f23b					      REPEND
    120  f23d		       85 02		      sta	WSYNC
    121  f23f					      REPEND
    122  f23f
    123  f23f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  f23f							;; Joystick input test for P0 up/down/left/right
    125  f23f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    126  f23f				   CheckP0Up
    127  f23f		       a9 10		      lda	#%00010000
    128  f241		       2c 80 02 	      bit	SWCHA
    129  f244		       d0 02		      bne	CheckP0Down
    130  f246		       e6 80		      inc	P0XPos
    131  f248
    132  f248				   CheckP0Down
    133  f248		       a9 20		      lda	#%00100000
    134  f24a		       2c 80 02 	      bit	SWCHA
    135  f24d		       d0 02		      bne	CheckP0Left
    136  f24f		       c6 80		      dec	P0XPos
    137  f251
    138  f251				   CheckP0Left
    139  f251		       a9 40		      lda	#%01000000
    140  f253		       2c 80 02 	      bit	SWCHA
    141  f256		       d0 02		      bne	CheckP0Right
    142  f258		       c6 80		      dec	P0XPos
    143  f25a
    144  f25a				   CheckP0Right
    145  f25a		       a9 80		      lda	#%10000000
    146  f25c		       2c 80 02 	      bit	SWCHA
    147  f25f		       d0 02		      bne	NoInput
    148  f261		       e6 80		      inc	P0XPos
    149  f263
    150  f263				   NoInput
    151  f263							; fallback when no input was performed
    152  f263
    153  f263							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    154  f263							;; Loop to next frame
    155  f263							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  f263		       4c 17 f0 	      jmp	StartFrame
    157  f266
    158  f266							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    159  f266							;; Creates a subroutine to set the X position of objects with fine offset
    160  f266							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    161  f266							;; A register contains the desired X-coordinate
    162  f266							;; Y=0 : Player0
    163  f266							;; Y=1 : Player1
    164  f266							;; Y=2 : Missile0
    165  f266							;; Y=3 : Missile1
    166  f266							;; Y=4 : Ball
    167  f266							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    168  f266				   SetObjectXPos subroutine
    169  f266		       85 02		      sta	WSYNC	; start a fresh new scanline
    170  f268		       38		      sec		; make sure carry-flag is set before subtracion
    171  f269				   .Div15Loop		; local label (only call by subroutine)
    172  f269		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    173  f26b		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    174  f26d		       49 07		      eor	#7	; handle offset range from -8 to 7
    175  f26f		       0a		      asl
    176  f270		       0a		      asl
    177  f271		       0a		      asl
    178  f272		       0a		      asl		; four shift lefts to get only the top 4 bits
    179  f273		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    180  f276		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    181  f279		       60		      rts
    182  f27a
    183  f27a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    184  f27a							;; Lookup table for the player graphics bitmap
    185  f27a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    186  f27a				   P0Bitmap
    187  f27a		       00		      byte.b	#%00000000
    188  f27b		       14		      byte.b	#%00010100
    189  f27c		       14		      byte.b	#%00010100
    190  f27d		       14		      byte.b	#%00010100
    191  f27e		       14		      byte.b	#%00010100
    192  f27f		       14		      byte.b	#%00010100
    193  f280		       1c		      byte.b	#%00011100
    194  f281		       5d		      byte.b	#%01011101
    195  f282		       5d		      byte.b	#%01011101
    196  f283		       5d		      byte.b	#%01011101
    197  f284		       5d		      byte.b	#%01011101
    198  f285		       7f		      byte.b	#%01111111
    199  f286		       3e		      byte.b	#%00111110
    200  f287		       10		      byte.b	#%00010000
    201  f288		       1c		      byte.b	#%00011100
    202  f289		       1c		      byte.b	#%00011100
    203  f28a		       1c		      byte.b	#%00011100
    204  f28b
    205  f28b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    206  f28b							;; Lookup table for the player colors
    207  f28b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    208  f28b				   P0Color
    209  f28b		       00		      byte.b	#$00
    210  f28c		       f6		      byte.b	#$F6
    211  f28d		       f2		      byte.b	#$F2
    212  f28e		       f2		      byte.b	#$F2
    213  f28f		       f2		      byte.b	#$F2
    214  f290		       f2		      byte.b	#$F2
    215  f291		       f2		      byte.b	#$F2
    216  f292		       c2		      byte.b	#$C2
    217  f293		       c2		      byte.b	#$C2
    218  f294		       c2		      byte.b	#$C2
    219  f295		       c2		      byte.b	#$C2
    220  f296		       c2		      byte.b	#$C2
    221  f297		       c2		      byte.b	#$C2
    222  f298		       3e		      byte.b	#$3E
    223  f299		       3e		      byte.b	#$3E
    224  f29a		       3e		      byte.b	#$3E
    225  f29b		       24		      byte.b	#$24
    226  f29c
    227  f29c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    228  f29c							;; Complete ROM size
    229  f29c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    230  fffc					      org	$FFFC
    231  fffc		       00 f0		      word.w	Reset
    232  fffe		       00 f0		      word.w	Reset
